{"pages":[{"title":"About","text":"这里是ZhangLK的个人网站，始于2019-05-27。 湿货多和啰里啰嗦是本站的两大特点。 很惭愧，只做了一点微小的工作，谢谢大家。","link":"/about/index.html"}],"posts":[{"title":"序","text":"这样的日子适合留下一些东西。 今天是小程序正式上线的日子，这是我从头到尾跟过的第一个项目，值得纪念。 本篇是继个人博客从学校服务器上迁出的开篇之作，也是经历WordPress之后使用的第二个博客框架——VuePress 用markdown来写作是一件奇妙的事情。 祝考研成功。 2019年5月28日 桂林","link":"/2019/05/28/article/Prologue/"},{"title":"前端菜鸟的面试记录","text":"春招转正失利，已提桶跑路，现将之前面过的公司进行记录。 愿互联网行业挺过寒冬，春暖花开，早日实现共同富裕！ 共勉之 2021春招（前端岗位）大中厂 深信服（简历挂） CVTE视源 （二面挂） 涂鸦智能（笔试挂） 步步高（简历挂） 顺丰科技（简历挂） 珍爱网（一面挂） 锐捷网络（笔试挂） 富士康（offer，工资太低，宿舍太差） 小公司 睿联技术（笔试挂） 店匠（二面挂） 赢和信息（offer，转正挂，垃圾公司尽早倒闭） 外包 软通动力（offer，外包没敢去） 中软国际（推掉了） 腾讯外包（笔试挂） 中国电信海南分公司研发中心（offer，人力外包，没编制） 2021年10月社招（前端岗位） 云创捷为（小程序外包，二面挂） 云迈网络（直播行业，二面挂） 有好软件（餐饮SaaS，一面挂） 微克科技（智能可穿戴，一面挂） 财盈通科技（电商外包，一面挂） 酷宅科技（物联网解决方案，笔试挂） 乾坤物联科技（UWB解决方案，offer） 十方融海（在线教育，一面挂） 科比特航空（无人机，offer） 华为OD （不是普通外包，笔试挂） 字节外包（头条，一面挂） 待补充 未完待续 2022年1月1日 深圳","link":"/2022/01/01/article/interview/"},{"title":"简述「in桂工」小程序","text":"本篇是小程序1.X答辩的逐字稿。 大家好，我是来自XXXX的XXX，我们这次进行答辩的项目是“in桂工”小程序。下面开始我的答辩： 我们项目的目标是打造“一站式”校园服务平台 首先，让我们看看大家目前普遍使用的校园服务平台。 不仅有教务处的网站，还有各种App，甚至还有各个平台的公众号。当我们想完成一些简单的操作，比如查成绩时，我们常常会感到困惑。我们究竟该选择哪个平台？ 那么说回到我们的项目“in桂工”，顾名思义，就是“在桂工”。那么，在桂工，我们可以学在桂工、住在桂工、玩在桂工。我们希望的是，能够打造一个一站式的平台。 那么，经过一段时间的努力，我们取得了一些微小进展，现在拿来给大家分享一下。 首先我们看到的这个主界面是我们的首页，从上而下分别是，可以滚动的banner，我们可以在这里展示相关的活动和推荐。下面是根据大家的点击量生成的快捷功能。在往下我们还可以看到我们自己一卡通的余额和最近的交易记录。右边还可以看到最近的考试时间。依次往下，我们可以看到我们今天的课表。 在屏幕的底部，我们可以看到四个底栏的选项。他们分别是：显示所有功能的页面、实时显示通知的信息流页面、以及个人的相关设置。 既然我们要做到一站式的服务，那么我们肯定要给大家提供相关的功能。以下是一些我们相关功能的展示。像大家日常都会使用到的课程表、成绩查询、考试地点查询、以及我们大家都很在意的体测查询。 那么，可能大家会有疑问，既然大家都有的功能，我们为什么要使用in桂工呢？我们能够有什么独到之处呢？ 当我们仔细观察这个界面，当你点击“查看详情”，就可以看到这们课程的详细信息。仔细观察，你就可以发现我们十分贴心的提供了你在年级里的排名，还帮你算好了及格率，让你对自己的学习掌握的更加透彻。 甚至，我们还提供了这门课程的成绩分布，让你了如指掌。 当然，类似的细节还有很多，因为时间的限制我只能举例说明。总之，精心而美好，功能强大而又充满了人性化的瞬间，每一处都恰到好处。 所以，这是我们的功能部分，截止到目前为止，我们有将近30多种以上的功能，分别囊括了教务处、体育部、财务处、图书馆和学工处。 当然可能有些我在这里没有列出，我们以此希望能够正在构建真正一站式的平台。 当然，我们构建的是一个平台，那么我们肯定要提供相关的开放能力。 目前我们已经提供支持了第三方应用上线的功能，通过我们的后台可以进行互不干扰统一的管理，当然我们也自己研发了开发工具，上传和修改应用将更加方便快捷。 如果有对我们平台感兴趣的同学，我们在这个网址里提供了相关的文档，可以随时查阅。同时，我们也欢迎大家可以把自己做好的应用上传到我们的平台上，工作人员审核过后，就可以上架平台。 接下来是实机演示环节 这就是我们今天所带来的项目，那么这个版本在今天，就会正式的对外发布。 希望大家能够喜欢，也欢迎大家随时向我们提出意见，我们会及时回复，谢谢大家。再见 2019年7月5日 桂林","link":"/2019/07/05/article/wxapp-2019/"},{"title":"祝考研成功","text":"但行好事，莫问前程。 祝考研成功。 2020年12月25日 桂林","link":"/2020/12/25/essay/exam2021/"},{"title":"结束","text":"从暑假的艰难起步，到九月份的强化，再到十月份的闭关修炼，再到冬天的冲刺。 是的，就这样结束了。一切都是那么真实，历历在目。肖四依然是舍友之间的谈资，我的高数预测卷其实还没写完。 “如何理解考研结束不是终点，而是新生活，新奋斗的起点？” 都过去了。 昨天晚上从图书馆出来之前，特地环顾了一下一眼看不到头的六楼自习室。我知道，这可能是我最后一次再这样出现在这里了。所有人好像都知道自己要做什么，一切仿佛跟之前没用什么区别。不曾换过的闭馆音乐，不曾开过的空调。图书馆似乎在用它特别的温柔向我挥手。 或许明天就会有新的人坐我的位置，开始新的学习。 “幸福不会从天而降，梦想不会自动成真。” 有些东西只有经历过才能真正理解。 这一年终于要过去了，有失有得，但并不后悔。 最后，祝考研上岸。 2020年12月29日 桂林","link":"/2020/12/29/essay/exam2022/"},{"title":"理解addLoadEvent函数","text":"阅读理解 在JS中 onload事件是 HTML DOM Event对象的一个属性，又叫事件句柄（Event Handlers），它会在页面或图像 加载完成后（注意是加载完成后）立即发生。 window.onload = func的作用就是在页面加载完成后将 func函数绑定到 onload事件上并执行。如果页面加载完成之后，只需要执行一个函数 func，那么只用 window.onload = func也就可以了，但是如果需要执行两个甚至多个函数呢？ 直接调用两次onload不就行了: 12window.onload = firstfunction;window.onload = secondfunction; 这么做的话，只有 secondfunction会被绑定，因为前面的值被后面的值覆盖了。那么该怎么办？ 将两个函数合并到一个函数当中不就行了，匿名函数发挥作用的时候到了： 1234window.onload = function() { fristfunction; secondfunction;} 不过，它也只能绑定两个函数。还好，大神们早已解决了这个问题。西蒙·威利森 (Simon Willison)——jQuery框架的开发者之一编写了下面的 addLoadEvent函数： 1234567891011function addLoadEvent(func) { var oldonload = window.onload;//将现有的事件处理函数的值存入变量中 if (typeof window.onload != 'function') { window.onload = func;//如果这个事件处理函数没有绑定任何函数，就把新函数添加给它 } else { window.onload = function() { oldonload(); func();//如果已经绑定了函数，就把新函数追加到现有指令的末尾 } }} 然后，不管页面加载完成后要执行多少个函数，只要调用这个函数就可以了： 1234addLoadEvent(firstfunction);addLoadEvent(secondfunction);addLoadEvent(thirdfunction);... 附：相关概念 支持onload事件的 HTML 标签有 &lt;body&gt;, &lt;frame&gt;, &lt;frameset&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;link&gt;, &lt;script&gt;支持该事件的 JavaScript 对象有 image（图像）, layer, window（整个页面） 事件句柄（Event Handlers），可以在某个事件发生时通过一个事件句柄对某个元素进行操作。事件是可以被控件识别的操作，如按下确定按钮，选择某个单选按钮或者复选框。每一种控件有自己可以识别的事件，如窗体的加载、单击、双击等事件，编辑框（文本框）的文本改变事件，等等。 HTML DOM Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态等。事件通常与函数结合使用，函数不会在事件发生前被执行 （这句很重要）。 参考资料：JavaScript DOM编程艺术 by Jeremy Keith 2021年1月28日 海口","link":"/2021/01/28/frontEnd/addLoadEvent/"},{"title":"JavaScript 异步代码的几个推荐做法","text":"今天给大家来推荐几个写好 JavaScript 异步代码的推荐做法，每种场景都有一个对应的 eslint 规则，大家可以选择去配置一下。 no-async-promise-executor不建议将 async 函数传递给 new Promise 的构造函数。 12345// ❌new Promise(async (resolve, reject) =&gt; {});// ✅new Promise((resolve, reject) =&gt; {}); 首先，你在 Promise 的构造函数里去使用 async ，那么包装个 Promise 可能就是没啥必要的。另外，如果 async 函数抛出了异常，新构造的 promise 实例并不会 reject ，那么这个错误就捕获不到了。 no-await-in-loop不建议在循环里使用 await，有这种写法通常意味着程序没有充分利用 JavaScript 的事件驱动。 1234// ❌for (const url of urls) { const response = await fetch(url);} 建议将这些异步任务改为并发执行，这可以大大提升代码的执行效率。 123456789// ✅const responses = [];for (const url of urls) { const response = fetch(url); responses.push(response);}await Promise.all(responses); no-promise-executor-return不建议在 Promise 构造函数中返回值，Promise 构造函数中返回的值是没法用的，并且返回值也不会影响到 Promise 的状态。 12345// ❌new Promise((resolve, reject) =&gt; { return result;}); 正常的做法是将返回值传递给 resolve，如果出错了就传给 reject。 1234// ✅new Promise((resolve, reject) =&gt; { resolve(result);}); require-atomic-updates不建议将赋值操作和 await 组合使用，这可能会导致条件竞争。 看看下面的代码，你觉得 totalPosts 最终的值是多少？ 123456789101112131415// ❌let totalPosts = 0;async function getPosts(userId) { const users = [{ id: 1, posts: 5 }, { id: 2, posts: 3 }]; await sleep(Math.random() * 1000); return users.find((user) =&gt; user.id === userId).posts;}async function addPosts(userId) { totalPosts += await getPosts(userId);}await Promise.all([addPosts(1), addPosts(2)]);console.log('Post count:', totalPosts); totalPosts 会打印 3 或 5，并不会打印 8，你可以在浏览器里自己试一下。 问题在于读取 totalPosts 和更新 totalPosts 之间有一个时间间隔。这会导致竞争条件，当值在单独的函数调用中更新时，更新不会反映在当前函数范围中。因此，两个函数都会将它们的结果添加到 totalPosts 的初始值0。 避免竞争条件正确的做法： 12345678910111213141516// ✅let totalPosts = 0;async function getPosts(userId) { const users = [{ id: 1, posts: 5 }, { id: 2, posts: 3 }]; await sleep(Math.random() * 1000); return users.find((user) =&gt; user.id === userId).posts;}async function addPosts(userId) { const posts = await getPosts(userId); totalPosts += posts; // variable is read and immediately updated}await Promise.all([addPosts(1), addPosts(2)]);console.log('Post count:', totalPosts); max-nested-callbacks防止回调地狱，避免大量的深度嵌套： 12345678910111213141516171819/* eslint max-nested-callbacks: [&quot;error&quot;, 3] */// ❌async1((err, result1) =&gt; { async2(result1, (err, result2) =&gt; { async3(result2, (err, result3) =&gt; { async4(result3, (err, result4) =&gt; { console.log(result4); }); }); });});// ✅const result1 = await asyncPromise1();const result2 = await asyncPromise2(result1);const result3 = await asyncPromise3(result2);const result4 = await asyncPromise4(result3);console.log(result4); 回调地狱让代码难以阅读和维护，建议将回调都重构为 Promise 并使用现代的 async/await 语法。 no-return-await返回异步结果时不一定要写 await ，如果你要等待一个 Promise，然后又要立刻返回它，这可能是不必要的。 1234// ❌async () =&gt; { return await getUser(userId);} 从一个 async 函数返回的所有值都包含在一个 Promise 中，你可以直接返回这个 Promise。 1234// ✅async () =&gt; { return getUser(userId);} 当然，也有个例外，如果外面有 try...catch 包裹，删除 await 就捕获不到异常了，在这种情况下，建议明确一下意图，把结果分配给不同行的变量。 123456789101112131415161718// 👎async () =&gt; { try { return await getUser(userId); } catch (error) { // Handle getUser error }}// 👍async () =&gt; { try { const user = await getUser(userId); return user; } catch (error) { // Handle getUser error }} prefer-promise-reject-errors建议在 reject Promise 时强制使用 Error 对象，这样可以更方便的追踪错误堆栈。 12345// ❌Promise.reject('An error occurred');// ✅Promise.reject(new Error('An error occurred')); node/handle-callback-err强制在 Node.js 的异步回调里进行异常处理。 1234567891011121314// ❌function callback(err, data) { console.log(data);}// ✅function callback(err, data) { if (err) { console.log(err); return; } console.log(data);} 在 Node.js 中，通常将异常作为第一个参数传递给回调函数。忘记处理这些异常可能会导致你的应用程序出现不可预知的问题。 如果函数的第一个参数命名为 err 时才会触发这个规则，你也可以去 .eslintrc 文件里自定义异常参数名。 node/no-sync不建议在存在异步替代方案的 Node.js 核心 API 中使用同步方法。 12345// ❌const file = fs.readFileSync(path);// ✅const file = await fs.readFile(path); 在 Node.js 中对 I/O 操作使用同步方法会阻塞事件循环。大多数场景下，执行 I/O 操作时使用异步方法是更好的选择。 @typescript-eslint/await-thenable不建议 await 非 Promise 函数或值。 12345678910111213// ❌function getValue() { return someValue;}await getValue();// ✅async function getValue() { return someValue;}await getValue(); @typescript-eslint/no-floating-promises建议 Promise 附加异常处理的代码。 12345678// ❌myPromise() .then(() =&gt; {});// ✅myPromise() .then(() =&gt; {}) .catch(() =&gt; {}); 养成个好的习惯，永远做好异常处理！ @typescript-eslint/no-misused-promises不建议将 Promise 传递到并非想要处理它们的地方，例如 if 条件。 12345// ❌if (getUserFromDB()) {}// ✅ 👎if (await getUserFromDB()) {} 更推荐抽一个变量出来提高代码的可读性。 123// ✅ 👍const user = await getUserFromDB();if (user) {}","link":"/2022/04/10/frontEnd/asyncAndawait/"},{"title":"有了for循环 为什么还要forEach？","text":"js中那么多循环，for for…in for…of forEach，有些循环感觉上是大同小异今天我们讨论下for循环和forEach的差异。 我们从几个维度展开讨论： for循环和forEach的本质区别。for循环和forEach的语法区别。for循环和forEach的性能区别。 本质区别 for循环是js提出时就有的循环方法。forEach是ES5提出的，挂载在可迭代对象原型上的方法，例如Array Set Map。forEach是一个迭代器，负责遍历可迭代对象。那么遍历，迭代，可迭代对象分别是什么呢。 遍历：指的对数据结构的每一个成员进行有规律的且为一次访问的行为。 迭代：迭代是递归的一种特殊形式，是迭代器提供的一种方法，默认情况下是按照一定顺序逐个访问数据结构成员。迭代也是一种遍历行为。可迭代对象：ES6中引入了 iterable 类型，Array Set Map String arguments NodeList 都属于 iterable，他们特点就是都拥有 [Symbol.iterator] 方法，包含他的对象被认为是可迭代的 iterable。 在了解这些后就知道 forEach 其实是一个迭代器，他与 for 循环本质上的区别是 forEach 是负责遍历（Array Set Map）可迭代对象的，而 for 循环是一种循环机制，只是能通过它遍历出数组。再来聊聊究竟什么是迭代器，还记得之前提到的 Generator 生成器，当它被调用时就会生成一个迭代器对象（Iterator Object），它有一个 .next()方法，每次调用返回一个对象{value:value,done:Boolean}，value返回的是 yield 后的返回值，当 yield 结束，done 变为 true，通过不断调用并依次的迭代访问内部的值。 迭代器是一种特殊对象。ES6规范中它的标志是返回对象的 next() 方法，迭代行为判断在 done 之中。在不暴露内部表示的情况下，迭代器实现了遍历。看代码 1234567let arr = [1, 2, 3, 4] // 可迭代对象let iterator = arrSymbol.iterator // 调用 Symbol.iterator 后生成了迭代器对象console.log(iterator.next()); // {value: 1, done: false} 访问迭代器对象的next方法console.log(iterator.next()); // {value: 2, done: false}console.log(iterator.next()); // {value: 3, done: false}console.log(iterator.next()); // {value: 4, done: false}console.log(iterator.next()); // {value: undefined, done: true} 我们看到了。只要是可迭代对象，调用内部的 Symbol.iterator 都会提供一个迭代器，并根据迭代器返回的next 方法来访问内部，这也是 for…of 的实现原理。 1234let arr = [1, 2, 3, 4]for (const item of arr) { console.log(item); // 1 2 3 4} 把调用 next 方法返回对象的 value 值并保存在 item 中，直到 done 为 true 跳出循环，所有可迭代对象可供for…of消费。 再来看看其他可迭代对象： 123456789101112131415161718192021function num(params) { console.log(arguments); // Arguments(6) [1, 2, 3, 4, callee: ƒ, Symbol(Symbol.iterator): ƒ] let iterator = arguments[Symbol.iterator]() console.log(iterator.next()); // {value: 1, done: false} console.log(iterator.next()); // {value: 2, done: false} console.log(iterator.next()); // {value: 3, done: false} console.log(iterator.next()); // {value: 4, done: false} console.log(iterator.next()); // {value: undefined, done: true}}num(1, 2, 3, 4)let set = new Set('1234')set.forEach(item =&gt; { console.log(item); // 1 2 3 4})let iterator = set[Symbol.iterator]()console.log(iterator.next()); // {value: 1, done: false}console.log(iterator.next()); // {value: 2, done: false}console.log(iterator.next()); // {value: 3, done: false}console.log(iterator.next()); // {value: 4, done: false}console.log(iterator.next()); // {value: undefined, done: true} 所以我们也能很直观的看到可迭代对象中的 Symbol.iterator 属性被调用时都能生成迭代器，而 forEach 也是生成一个迭代器，在内部的回调函数中传递出每个元素的值。（感兴趣的可以搜下 forEach 源码， Array Set Map 实例上都挂载着 forEach ，但网上的答案大多数是通过 length 判断长度， 利用for循环机制实现的。但在 Set Map 上使用会报错，所以我认为是调用的迭代器，不断调用 next，传参到回调函数。由于网上没查到答案也不妄下断言了，有答案的人可以评论区给我留言） for循环和forEach的语法区别 了解了本质区别，在应用过程中，他们到底有什么语法区别呢？ forEach 的参数。 forEach 的中断。 forEach 删除自身元素，index不可被重置。 for 循环可以控制循环起点。 forEach 的参数我们真正了解 forEach 的完整传参内容吗？它大概是这样： 1arr.forEach((self,index,arr) =&gt;{},this) self： 数组当前遍历的元素，默认从左往右依次获取数组元素。index： 数组当前元素的索引，第一个元素索引为0，依次类推。arr： 当前遍历的数组。this： 回调函数中this指向。 123456789let arr = [1, 2, 3, 4];let person = { name: 'ZLK'};arr.forEach(function (self, index, arr) { console.log(`当前元素为${self}索引为${index},属于数组${arr}`); console.log(this.name+='666');}, person) 我们可以利用 arr 实现数组去重： 123456let arr1 = [1, 2, 1, 3, 1];let arr2 = [];arr1.forEach(function (self, index, arr) { arr1.indexOf(self) === index ? arr2.push(self) : null;});console.log(arr2); // [1,2,3] forEach 的中断在js中有break return continue 对函数进行中断或跳出循环的操作，我们在 for循环中会用到一些中断行为，对于优化数组遍历查找是很好的，但由于forEach属于迭代器，只能按序依次遍历完成，所以不支持上述的中断行为。 1234567891011121314151617181920212223let arr = [1, 2, 3, 4], i = 0, length = arr.length;for (; i &lt; length; i++) { console.log(arr[i]); //1,2 if (arr[i] === 2) { break; };};arr.forEach((self,index) =&gt; { console.log(self); if (self === 2) { break; //报错 };});arr.forEach((self,index) =&gt; { console.log(self); if (self === 2) { continue; //报错 };}); 如果我一定要在 forEach 中跳出循环呢？其实是有办法的，借助try/catch： 12345678910111213try { var arr = [1, 2, 3, 4]; arr.forEach(function (item, index) { //跳出条件 if (item === 3) { throw new Error(&quot;LoopTerminates&quot;); } //do something console.log(item); });} catch (e) { if (e.message !== &quot;LoopTerminates&quot;) throw e;}; 若遇到 return 并不会报错，但是不会生效 12345678910let arr = [1, 2, 3, 4];function find(array, num) { array.forEach((self, index) =&gt; { if (self === num) { return index; }; });};let index = find(arr, 2);// undefined forEach 删除自身元素，index不可被重置在 forEach 中我们无法控制 index 的值，它只会无脑的自增直至大于数组的 length 跳出循环。所以也无法删除自身进行index重置，先看一个简单例子： 12345let arr = [1,2,3,4]arr.forEach((item, index) =&gt; { console.log(item); // 1 2 3 4 index++;}); index不会随着函数体内部对它的增减而发生变化。在实际开发中，遍历数组同时删除某项的操作十分常见，在使用forEach删除时要注意。for 循环可以控制循环起点如上文提到的 forEach 的循环起点只能为0不能进行人为干预，而for循环不同： 1234567let arr = [1, 2, 3, 4], i = 1, length = arr.length;for (; i &lt; length; i++) { console.log(arr[i]) // 2 3 4}; 那之前的数组遍历并删除滋生的操作就可以写成 12345678910111213141516let arr = [1, 2, 1], i = 0, length = arr.length;for (; i &lt; length; i++) { // 删除数组中所有的1 if (arr[i] === 1) { arr.splice(i, 1); //重置i，否则i会跳一位 i--; };};console.log(arr); // [2]//等价于var arr1 = arr.filter(index =&gt; index !== 1);console.log(arr1) // [2] for循环和forEach的性能区别 在性能对比方面我们加入一个 map 迭代器，它与 filter 一样都是生成新数组。我们对比 for forEach map 的性能在浏览器环境中都是什么样的：性能比较：for &gt; forEach &gt; map在chrome 62 和 Node.js v9.1.0环境下：for 循环比 forEach 快1倍，forEach 比 map 快20%左右。原因分析 for：for循环没有额外的函数调用栈和上下文，所以它的实现最为简单。 forEach：对于forEach来说，它的函数签名中包含了参数和上下文，所以性能会低于 for 循环。 map：map 最慢的原因是因为 map 会返回一个新的数组，数组的创建和赋值会导致分配内存空间，因此会带来较大的性能开销。如果将map嵌套在一个循环中，便会带来更多不必要的内存消耗。当大家使用迭代器遍历一个数组时，如果不需要返回一个新数组却使用 map 是违背设计初衷的。在我前端合作开发时见过很多人只是为了遍历数组而用 map 的： 123let data = [];let data2 = [1,2,3];data2.map(item=&gt;data.push(item)); 写在最后：这是我面试遇到的一个问题，当时只知道语法区别。并没有从可迭代对象，迭代器，生成器和性能方面，多角度进一步区分两者的异同，我也希望我能把一个简单的问题从多角度展开细讲，让大家正在搞懂搞透彻。 查看原文","link":"/2022/02/22/frontEnd/forAndForeach/"},{"title":"浅谈中型 Web 应用的开发与部署","text":"本文从真实场景出发分析一个中型 Web 应用从立项到上线稳定运行的平稳解决方案，力求既不太空泛以至于看完了仍然找不到落地的点，也尽量不会特别纠结于个别细节导致没有相关使用经历的同学无法感同身受，而是从宏观到方法论，分析整个流程中我们需要用到的工具、方法与规范，给大家提供一个参考。 本文适合具有一定经验的初中级前端开发者，如果有相关问题，也欢迎与我交流。 目录 项目构建的搭建，关键词： webpack 、 react/vue cli ， steamer ，组件库 代码的规范约束，关键词： typescript 、 eslint 、prettier 测试与测试部署，关键词： 测试部署方案 、docker 日志查看与脚本错误的监控，关键词： sentry 、 vconsole 、mlogger 版本发布更新，关键词： 发布系统 、灰度发布 访问量实时监控 起步：项目构建的搭建使用 webpack 搭建脚手架目前在一般的项目中，我们都会使用 webpack 作为搭建开发环境的基础，而 react 和 vue 也各自提供了 cli 工具用于开发一个中小型项目，react 提供了 eject 功能让我们可以更加自由的配置 webpack，而 vue 脚手架虽然没有提供类似命令，但是借助 webpack 工具链我们几乎也可以自由定制每一个角落。 不过，这里我的建议是，如果是个人项目或小型项目，我们可以基于 react 或 vue 的脚手架进行更改使用，对于一个具备一定规模的项目团队，建议还是自己维护一套单独的 webpack 构建环境，原因如下： 由于我们一般需要在项目中接入各类司内工具、支持高级API和语法、同时支持 react/vue、构建目录定制化等各类工作，实际上 80% 以上的工作我们都需要在模版之上自行添加，这个时候我们再用脚手架带来的收益已经非常小了，反而还会受制于项目的初始目录结构。 我们在自定义脚手架的 webpack 构建的时候，也需要梳理出一定的目录规范与约束，这样也有利于提高后期脚手架的可维护性和扩展性，一般来说，我们也要对脚手架中的公共部分和项目私有部分进行分离，对于一个具体项目而言，可以不用改动 webpack 的项目公共部分，这样也有利于减少不同项目之间的切换成本，对于我们目前的项目，一般会有如下两个目录： 12345678- project - project.js- config - feature - plugins - rules - script.js - webpack.base.js 对于一个项目，只需更改 project 下的配置。 这里我也推荐一个前同事做的steamer研发体系，在从中也可以找到很多相关参考，最简单的方式，就是直接在steamer-simple 的基础上进行扩展。 定制生成目录生成目录的格式，这里需要单独讲一下。 一般来说，我们生成目录的格式都是要跟发布系统进行结合的，不过也有的时候，我们做项目的时候还没有明确要接入发布系统，或者尚不知道发布系统的格式要求，但是一般情况下我们应当遵循下面的约定： js/css/img 等资源文件和 html 文件分离，前者发布到 CDN，后者发布到 http 服务器。 html 中引入的文件地址，应当是在构建过程中更新的 CDN 地址，而不是相对路径地址。 如果有离线包（offline 能力需要对应的客户端 webview 支持）等，需要单独一个目录。 对于我们目前的项目而言，一般情况下会有三个生成目录： 123- cdn- offline # 需要客户端支持该能力- webserver 如果一开始我们把所有内容生成到一个目录中了，这给我们后期的改动和维护，都带来很大的隐患。 组件库组件库这一部分，适合项目开始变得复杂的情况下进行启动，而不建议一开始进行过渡设计，建设组件库能够通过组件复用降低我们的开发成本，同时，组件库也需要专人维护，保持更新。 开发：代码的规范约束对于 js 文件的代码格式，诸如要不要分号、两个还是四个字符缩进等，一只争议不断，本文也不对此进行讨论，但是对于一个团队的项目集合（而不是单个项目）而言，代码风格的统一，是一个非常有必要而且必须要做的事情。 typescript关于 typescript 的相关文章实在太多了，这里也不对此进行详细的说明，其对代码的可读性、规范约束、降低报错风险等都有很好的改进，对于越复杂的项目其效果越明显。 另外， typescript 入门教程的作者也在我们团队中，这里我想说，如果现在还没有开始使用 typescript，请开始学习并使用 typescript 吧。 eslint 与 prettier除了 typescript 以外，在代码格式方面还建议使用 eslint 和 prettier 来进行代码格式的约束，这里虽然 eslint 和 prettier 两者在某些情景下会有些重叠，但是两者的侧重点不同，eslint 侧重于代码质量的检查并且给出提示，在某种层面上，可以看作是 typescript 的补充，而 prettier 在格式化代码方面更具有优势，并且 prettier 在设计之初就考虑了和 eslint 的集成，所以你可以完全放心的在项目中使用两者，而不用担心出现无法解决的冲突。 另外，eslint 社区中已经形成了很多种最佳实践，而我们团队也设计出了自己的一套 eslint 规则，可以按需取用 p.s. 目前 tslint 后续计划不在维护，转向 eslint 增强，因此我们在项目中可以不再使用 tslint。 以上这几种代码风格方面的约束，适合项目之初即开始约束，这样在中后期会有巨大的时间成本的节省和效率的提升。 协作：使用 git使用 git 进行协作这里其实包括两个点，使用 git 管理项目与自建 gitlab，后者是一个比较基础性的工作，并且实际上难度并不大，我认为每一个公司都可以使用自建的 gitlab 进行版本管理，这个实际上难度并不大，并且可以有效的保护公司的代码财产，如果你所在的公司还没有，那么这也是你的机会。 在具体的使用 git 中，对于git的分支/TAG管理、PR规范、提交文件约束等都应当有一套合理的流程，这里我对几点比较重要的进行说明： 锁定主干与分支开发，我们在日常开发中禁止直接提交主干，而是只能在分支中进行开发，并且通过 MR 的方式提交到主干。 git hooks 检查：我们应该通过 git hooks 进行必要的检查，比如自动化测试、eslint 检查、以及一些项目中必要的检查。 MR 检查与 Code Review，这里建议在 Merge Request 的时候做两件事情，一件是 Code Review，不过这个在某些特殊情况下不具备条件，尤其是团队人力紧张的时候，另外一个则是 MR 的 HOOK 触发检查，这个一般需要借助一些持续集成工具来完成，可以说是我们代码在合并主干之前的最后一个关卡。 测试：测试与测试部署测试是代码开发中重要的一个环节，但实际上对于前端开发来说，前端开发工程师一般较少书写测试用例，也并没有专业的测试开发工程师来辅助工作，不过，一般会有配备系统测试工程师在黑盒的情况下进行冒烟测试和功能测试以及整体链路的验收，俗称“点点点”。而这个时候，前端开发要做的就是把程序代码部署到测试服务器上，同时提供一个尽可能真实的场景供测试进行测试。 在笔者经历的项目中，虽然也使用了单元测试、端对端测试，不过这一部分体系并不十分完备，并且可能也不是大多数前端开发者感兴趣的内容，所以这里主要总结如何进行高效的测试部署与发布对接。 一般来说，我们一般会有一台到多台 Linux 测试机，供测试环境部署使用，对于前端项目而言，一般不需要特殊环境，可以进行 webpack 构建以及有 nginx 进行转发即可。 而测试环境的部署，如果是让我们手动登录去部署，显然是不合理的，如果我们纯粹使用 CI 来完成这件事，则对 CI 工具的能力和项目人员素质有一定要求，并且不具备可视化管理能力，容易出错，这里我建议可以维护一个可视化系统来进行测试环境的部署和管理，其整个环节应该是这样的： 1本地代码 -&gt; gitlab -&gt; 测试系统部署 -&gt; 对接发布系统 这里的测试系统，实际上是从 gitlab 拉取代码，并且本地执行 build 命令（一般是 npm run build）并把构建结果存储在 nginx 可代理的目录即可，出于系统完备性考虑，一般我们会有多台测试机，这里我建议一般拿其中的一台作为构建机，其他的测试机仅提供 nginx 代理能力即可，我们在一台构建机中进行构建，并且将构建结果通过系统命令发送到其他的测试机。 一台构建机可以服务于所有的项目，这里还可能涉及到 webpack、nodejs 版本的维护，我们需要约束各个测试项目构建处在一个相对独立的环境中，我们也可以使用过 Docker 来进行构建，保证隔离。 构建完成后，一般我们借助 Fiddler、Charles、Whistle 等任意一款代理工具，即可以进行测试。 监控：日志查看与脚本错误的监控对于前端项目而言，即使我们已经使用了 typescript、eslint 并且也有了一些测试脚本和系统测试工程师进行的功能测试，我们还是免不了会出现 js 脚本错误，特别是 js 代码的运行环境和设备的多样化，很多错误我们并没有发现，但是产品、运营同学却出现了，或者到了线上在用户设备上出现了。 所以，有两个事情我们必须要做： 日志查看功能（手机端）：现在我们写的大多数 TO C 页面都是在手机端进行，查看 console 非常不方便，我们需要一个线上实时查看 console 的工具。 我们需要脚本错误日志统计系统来进行错误统计管理与具体错误查看。 对于第一个功能，进行细分，我们需要做这样几件事情： 嵌入一个 console 和 网络请求查看器，并且只在特殊情况下才能触发（比如连续点击标题十次、或者使用特定交互手势） 在触发查看器的时候，可以将日志完整地进行上传并分析。 同时可以对该用户进行染色，会自动上传并记录该用户一定时间内后续刷新后操作的全部日志。 不过这里并没有完全实现以上三点的开源库推荐，可以在 vconsole 或者 mlogger 的基础上进行适当扩展，完成相关功能。 对于第二个功能，我们需要一个完整的统计分析与管理的错误系统，这个如果自行开发的话，难度会比较大，这里强烈推荐 sentry，可以非常方便的使用 Docker 部署到服务器端，并且拥有非常强大的日志错误分析与处理能力，通过结合 JavaScript 的 sourcemap ，可以给我们的错误定位带来极大的方便。 总之，日志查看与脚本错误监控，是比较重要但是同时容易被忽视的地方，很多时候，我们的系统在线上使用了几个月了，真正有问题反馈了，我们才会考虑加上这些功能，但这个时候通常已经造成了损失。 发布：版本发布更新发布系统，一般作为前端最后环节的系统，通常会和测试部署系统打通（或合二为一），一般的发布系统的必要功能如下： 对于前端的发布，每次只发布有改变的文件，无变动的文件则无需发布。 每次发布先发布 js/css/img 等资源文件，生效之后再发布 html 文件。 发布系统保留线上旧版代码，出问题后可以快速一键回滚。 至于一些其他的日志、报表等辅助性功能，则根据需要满足，这里不再赘述。 灰度发布灰度发布是大型项目在发布时的常见方法，指在发布版本时，初始情况下，只允许小比例（比如1-5%比例的用户使用），若出现问题时，可以快速回滚使用老版本，适用于主链路和访问量较大的页面。 对于前端的灰度，实际上有以下几种方案： 在代码层面进行灰度，即通过 if/else 进行判断，这样无需发布系统关注，也可以自由配置规则、比例与白名单/黑名单。 在入口层面进行灰度，比如 App 内嵌的 H5 则在客户端的对应入口进行回复，这样通常也无需发布系统关注。 通过发布系统，按照比例灰度，比如我们有 10 台 webserver，如果我们先发布 1 台，这样我们的灰度比例为 10%。 访问量实时监控最后一点，我们还需要一个访问量实时监控系统，我们上述有了错误查看与脚本监控系统，但是对于我们的各个页面的访问量、点击率等指标，通常是产品/运营同学比较关心的，同时访问量的波动情况也是项目健康度的一个表征（访问量突然大幅上涨或下跌，一般都有其特定原因），所以我们需要访问量实时监控系统。 而实际上访问量监控系统也有两种不同形态： 对于每一个上报 key，只进行数量上的统计 对于每一个上报 key，可以携带一些信息，对携带信息进行统计分析。 通常情况下，前者的功能是实时或者低延时的，而后者由于需要一部分统计分析，通常可以接受非实时情况（一般每天出前一天的报表）。 这部分内容，需要较强的后端接口稳定性，通常前端需要和对应岗位的同学共建。 总结总结下来，我们一个稳定的前端项目，至少涉及到以下环节： 完善的项目脚手架与代码约束规范 内部 gitlab 可视化管理的测试部署系统 实时日志查看工具 脚本错误统计管理系统 发布管理系统 访问量实时监控系统 如果你所在的团队哪个环节还没有或者不完善，那么这也是你的机会。 查看原文","link":"/2022/03/01/frontEnd/frontEndBuildRoadmap/"},{"title":"重学JS系列","text":"“如何理解考研结束不是终点，而是新生活，新奋斗的起点？” 经过考研的洗礼之后，随手做了几套面试题，感觉自己还有很多不足。所以还是希望有机会能够重新梳理自己知识体系。前端入坑一去不复返，在前进的道路上，希望我们可以共勉之！ 那么先从JS开始。 2020年12月30日 桂林","link":"/2020/12/30/frontEnd/reStudyJS-EP0/"},{"title":"S02E00 七天玩转金融科技","text":"深入浅出的金融速成教学事实证明玩不转 此系列文章仅用于培训教学，请勿进行商用。 目录 S02E01 证券市场基础知识 S02E02 证券投资基金基础知识 S02E03 债券基础知识 S02E04 股票业务基础知识 S02E05 会计基础知识 S02E06 估值财务系统 S02E07 投资交易系统介绍 S02E08 注册登记系统介绍 S02E09 归纳与总结 2021年7月5日 长沙","link":"/2021/07/05/finance/financeStudy-EP0/"},{"title":"S02E01 证券市场基础知识","text":"证券市场基础知识 一、金融市场的定义、要素、功能金融市场的定义： 金融市场是进行金融融通的场所，在这里实现借贷资金的集中和分配，并由资金供给与资金需求的对比形成该市场的价格。 金融市场的要素：1、金融市场的交易对象：货币基金2、金融市场的交易主体：个人、企业、政府、金融机构3、金融市场的交易工具：直接金融工具、间接金融工具4、金融市场的交易价格：利率 金融市场的功能：资金筹集功能 （最基本的功能）直接调节功能间接调节功能信息反馈功能产业结构优化功能 二、金融市场的分类：金融市场的划分按交易期限划分：货币市场（短期）、资本市场（长期）按交割期限划分：现货市场、期货市场按政治地理区域划分：国内金融市场、国外金融市场按交易品种划分：股票、基金、债券、回购、外汇、黄金、保险 我国的金融市场主要有：银行间借拆、银行放贷、证券公司股票、保险、外汇、专门性社会基金机构 我国的金融工具主要有：银行票据、股票、基金、债券、国债、汇兑、大额存单、外汇 三、金融机构及其构成：金融机构的定义及特殊性金融机构的定义：凡是专门从事各种金融活动的组织，均称为金融机构金融机构的特殊性：（与一般企业相比）特殊的经营对象与经营内容 （货币的收付、借贷、其他金融业务） 特殊的经营关系与经营原则 （货币资金的借贷或投资关系） 特殊的经营风险影响 （信用风险、挤兑风险、利率风险、汇率风险） 金融机构主要有 中央银行 （中国人民银行）政策性银行 （国家开发银行、进出口银行、农业发展银行） 银行理财公司国有独资银行 （工行、建行、中行、农行、交行、邮储）股份制银行 （招商、中信、华夏）信用合作社 （农村信用合作社、城市信用合作社）保险公司 （财产、人身）在华外资金融机构 （在华代表处、在华营业性分支机构） 其他非银行的金融机构信托公司证券公司基金公司财务公司金融租赁公司邮政储蓄机构 监督机构（一行两会）中国人民银行中国证券监督管理委员会中国银行保险监督管理委员会 商业银行之托管部托管业务部由：运营处、监督稽核处、综合管理处、市场营销处&amp;nbsp;构成 托管人的职责资产保管资产清算资产核算（会计核算、复核审查资产净值）投资运作监督 托管人的作用防止财产被挪用，保障财产的安全监督投资管理人的投资运作，保障持有人的的权益对资产进行会计复核，防止差错，保证准确性真实性 四、金融市场工具金融工具的定义： 在信用活动中产生，能够证明金融交易金融、期限、价格的书面文件。它对于债权债务双方所应承担的义务与享有的权利均有法律约束作用。&lt;br&gt; 金融工具的特征：偿还期、流动性、安全性、收益性 金融工具的分类按交易期限划分：短期金融工具、长期金融工具按融资形式划分：直接金融工具、间接金融工具按权利与义务划分：债权债务类金融工具、所有权类金融工具按是否与信用活动相关：原生金融工具、衍生金融工具 金融工具的种类：短期债券、回购协议、可转让大额定期存单、国债、公司债券、企业债券、股票、基金2021年7月6日 长沙","link":"/2021/07/06/finance/financeStudy-EP1/"},{"title":"S02E02 证券投资基金基础知识","text":"证券投资基金基础知识 一、基金的概念及相关知识1、证券投资基金的定义： 证券投资基金是指通过发售基金份额，将众多投资者的资金集中起来，形成独立资产，由基金托管人托管，基金管理人管理，以投资组合的方法进行证券投资的一种利益共享、风险共担的集合投资方式，代表了一种委托关系。 2、基金市场的参与主体 1、基金投资者：（购买份额、持有人） 2、基金管理人：（基金管理公司、证券公司、保险资管公司） 3、基金托管人：（资产保管、资金清算、会计复核、监督监管） 4、基金登记注册机构：（中国证券登记结算有限责任公司） 5、监管机构和自律机构：（证监会、基金行业自律组织、证券交易所） 3、证券投资基金与股票、债券的区别 4、证券投资基金的常见分类方式1、按基金的设立方式分类 契约型基金 （我国主要是这种） 公司型基金 2、按基金的投资标的分类 股票性基金 债券型基金 货币市场基金 混合基金 3、按基金的运作方式分类 封闭式基金 开放式基金 4、按基金的募集对象分类 公募基金 私募基金 5、特殊类型基金 指数基金 （沪深300） 交易型开放式指数基金（ETF） 上市型开放式基金（LOF） QDII 基金（合格境内机构投资者） 二、基金的认购、申购、赎回及交易1、基金的认购 认购的定义：投资者在基金成立之前向基金公司购买基金金额的行为 认购价格：通常为1元/份，基金份额在合同生效时确认，并且在建仓期后才能赎回 认购份额= (认购金额+募集期利息) / [ 基金面值 * (1+认购费率) ] 2、基金的申购 申购的定义：投资者在基金成立之后向基金公司购买基金份额的行为 申购原则：未知价法、金额申购 申购份额= 申购金额 / [ 基金单位净值 * (1+申购费率) ] 3、基金的赎回 赎回的定义：投资者向基金管理人卖出基金份额的行为 赎回原则：未知价法、份额赎回 赎回金额＝ 赎回份额 * [ 基金单位净值 * (1－赎回费率) ] 4、基金申赎规则总结 申购原则：未知价法、金额申购 赎回原则：未知价法、份额赎回 “未知价”原则：即基金的申购与赎回价格以受理申请当日收市后计算的基金单位净值为基准进行计算 基金采用金额申购和份额赎回的方式，即申购以金额申请，赎回以份额申请 5、基金的交易 1、上市交易的基金类别：封闭式基金、LOF、ETF 2、基金申赎与基金交易的区别 交易市场不同，基金申赎是一级市场的委托，买卖是二级市场的委托 交易价格不同，基金申赎是按净值结算，买卖是按二级市场的成交价格结算 交易费用不同，基金申赎收取申购、赎回费，买卖只收取佣金 确认时间不同，普通开放式基金的申赎T+2确认，QDII申赎T+3确认，基金买卖的交收时间同A股（T+1清算交收） 申赎行为会引起基金资产的变化，买卖行为不会影响基金资产。 三、基金资产的估值与分红1、基金资产的估值 1、基金估值的目的：为了准确、真实的反映本基金所持有金融资产和所承担金融负债的公允价值，并准确计算出本基金的经营收益，为基金的申购、赎回等交易提供公允的价值基础。 2、基金资产净值的计算：基金资产净值=总资产-总负债 总资产：指基金拥有的所有资产（包括股票、债券、银行存款和其他有价证券等）按照公允价格（可变现净值）计算的资产总额。 总负债：指基金运作及融资时所形成的负债，包括应付给他人的各项费用、应付资金利息等。 基金费用一般包括两大类： 一类是在基金销售过程中发生的由基金投资人自己承担的费用，主要包括认购费、申购费、赎回费和基金转换费。这些费用一般直接在投资人认购、申购、赎回或转换时收取。 另一类是在基金管理过程中发生的费用，主要包括基金管理费、基金托管费、信息披露费等，这些费用由基金承担。 3、基金单位净值的计算：基金单位净值=基金资产净值/基金份额数量 基金单位净值：指计算投资者申购基金份额、赎回资金金额的基础，是评价基金投资业绩的基础指标之一。 基金份额数量：指当时发行在外的基金单位的总量 2、基金分红 利息收益 股利收益 资本利得 其他收入 基金分红的分配方式 1、现金分红方式 2、分红再投资转换为基金份额 四、基金公司运作管理架构1、公募基金产品的生命周期 2、基金公司运作管理部门设置 3、基金公司的投资流程 2021年7月7日 长沙","link":"/2021/07/07/finance/financeStudy-EP2/"},{"title":"S02E03 债券基础知识","text":"债券基础知识培训 一、债券的基本认识1、债券的定义 债券是政府、金融机构、企业等机构直接向社会借债筹措资金时，向投资者发行，并且承诺按规定利率支付利息并按约定条件偿还本金的债权债务凭证。 债券通常又称为固定收益证券，因为这类金融工具能够提供固定数额现金流。 债券市场是债券发行和买卖交易的场所，将需要资金的政府机构或公司与资金盈余的投资者联系起来。 2、债券的参与方 债券发行人：借入资金的经济主体，包括了中央政府、地方政府、金融机构和企业等 债券投资人：出借资金的经济主体 债券承销商：债券承销商负责债券的发行与承销，他们在债券发行人和债券投资人之间起到金融中介的作用 债券登记结算机构： 中央国债登记结算有限责任公司（中债登）：银行间市场债券登记托管结算机构 银行间市场清算所股份有限公司（上海清算所）：公司信用债券、同业存单、大额存单等货币市场工具登记托管结算中心 中国证券登记结算有限责任公司（中登）：交易所全部证券登记结算业务 监管机构： 证券监督管理委员会监管（证监会监管）：上市企业发行债券（公司债） 中国人民银行监管（央行监管）：短期融资券、中期票据等 国家发展与改革委员会监管（发改委监管）：企业债、中小企业集合债券 3、发行债券的意义 对于政府来说：发行债券是为了筹措资金以弥补财政赤字和扩大公共投资。 对于金融机构来说：发行债券的目的主要是为了增加资金以扩大贷款规模；改变本身的资产负债结构。 对公司来说：在自有资金不能完全满足其资金需求时，便需要向外部筹资。通常公司对外筹资的渠道有三个：发行股票、发行债券、向银行等金融机构借款。 发行债券在一定程度上弥补了股票筹资和向银行借款的不足。 4、债券的基本要素 发行者：该债券的债务主体 票面价值：是债券票面标明的货币价值，规定币种 票面利率：名义利率，是债券年利息与债券票面价值的比率，百分数 到期期限：从发行之日起至偿清本息之日止的时间 发行价格：高于面额为溢价，等于面额为平价，低于面额为折价 付息方式：分为一次性付息、分期付息等 发行额度：根据发行人的资金需求、债券种类及市场状况决定 信用评级：测定发行人不履约而造成债券本息不能偿还的可能性 5、债券的特征 偿还性：一般规定有偿还期限，发行人必须按约定条件偿还本金并支付利息 流通性：可按需要和市场的实际情况转让债券，提前收回本金，实现投资收益 收益性：利息收入、买卖差价收入、再投资收益 安全性：收益比较稳定，不随发行者经营收益的变动而变动，风险较小 6、债券的分类 按发行主体可分为 政府债券 国债（弥补国家财政赤字，或者为了一些耗资巨大的建设项目筹措资金） 记账式国债 （由 财政部 面向全社会各类投资者、通过无纸化方式发行、以 电子记账 的方式记录债权并可以上市和流通转让的债券） 储蓄国债（凭证式）（填制 国库券收款凭证 的方式发行，不可流通转让） 储蓄国债（电子式）（以 电子方式 记录债权的方式发行，不可流通转让） 地方政府债券（以当地政府的税收能力作为还本付息的保证） 金融债券（由银行和非银行金融机构发行的债券，具有较高的安全性） 公司债券（公司债券风险与其本身的经营状况直接相关） 按付息方式可分为 零息债券：指债券合约未规定利息支付的债券 付息债券：按合约中规定，在存续期间对持有人定期支付利息 息票累积债券：与附息债券相似，也规定了票面利率，但持有人只能在债券到期时一次性获得本息，存续期间没有利息支付 按计息方式可分为 固定利率债券：有固定的到期日，并在偿还期内有固定的票面利率和不变的面值 浮动利率债券：债券的票面利率不是固定不变的，通常与一些利率进行挂钩，比如上海同业拆借率等等，根据定价日挂钩利率的变动而进行变动 可调利率债券：是指在债券存续期内允许根据一些事先选定的参考利率指数的变化，对利率进行定期调整的债券，调整间隔往往事先设定，包括1个月、6个月、1年、3年、5年等 按偿还期限可分为 长期债券：偿还期限在10年或10年以上的债券 中期债券：偿还期限在1年以上10年以下的债券 短期债券：偿还期限在1年或1年以内的债券，同业存单、短融、超短融 按是否可以赎回可分为 可赎回债券：在债券到期前，发行人可以以事先约定的赎回价格收回的债券 不可赎回债券：不能在债券到期前收回的债券 按是否可以转股可分为 可转换债券：在特定时期内可以按某一固定的比例转换成普通股的债券，它具有债务与权益双重属性，属于一种混合性筹资方式 不可转换债券：不能转换为普通股的债券 7、债券与股票的异同点 二、债券的发行与承销三、债券的交易2021年7月7日 长沙","link":"/2021/07/07/finance/financeStudy-EP3/"},{"title":"S02E04 股票业务基础知识","text":"股票业务基础知识培训 #一、股票定义及相关概念#1、股票的定义 股票是股份有限公司发行的，用以证明投资者的股东身份，并据以获取股息和红利的凭证。 股票实质上代表了股东对股份公司的 所有权 ，一经发行，购买股票的投资者即成为公司的股东，股东凭借股票可以获得公司的股息和 红利 ，参加股东大会并行使自己的 权力 ， 同时也承担相应的责任和 风险 。 同一类别的每一份股票所代表的公司所有权是相等的。每个股东所拥有的公司所有权份额的大小，取决于其持有的股票数量占公司总股本的比重。 纸质股票载明的事项 公司名称 公司成立的日期 股票种类、票面金额 代表的股份数量 股票编号 公司法定代表人签名 #2、股票的性质 有价证券 ：有价证券是财产价值和财产权利的统一表现形式，股票本身没有价值，但它是一种代表财产权的有价证券。 要式证券 ：股票应具备《公司法》规定的有关内容，必须具备规定的要件（公司名称、股票种类、票面金额等），否则股票就无法律效力。 证权证券 ：证权证券是指证券是权利的一种物化的外在形式，是权利的载体，股票用来证明股东的权利。 资本证券 ：发行股票是股份公司筹措自有资本的手段，因此股票是投入股份公司资本份额的证券化，属于资本证券。 综合权利证券 ：当公司股东将出资交给公司后，股东对其出资财产的所有权就转化为股东权，股东依法享有资产收益、重大决策、选择管理者等权利。 #3、股票的特征 收益性 ：最基本特征，股票可以为持有人带来收益的特征，其收益包含了股息和红利，以及股票流通而取得的资本利得。 风险性 ：投资收益的不确定性，高风险的金融产品。 流动性 ：可以通过依法转让而变现的特性，股票持有人不能从公司退股，但股票转让为其提供了变现的渠道。 永久性 ：股票所载的权利的有效性是始终不变的，因为它是一种无期限的法律凭证。 参与性 ：股票持有人有权参与公司重大决策的特性，有权出席股东大会，选举公司董事会，行使对公司经营决策的参与权等。 #4、股票的分类 按照股东的权利划分 普通股 是指秉持“ 一股一权 ”规则之下收益权与表决权无差别、等比例配置的股票。是最基本的，最常见的一种股票，其持有者享有股东的基本权利和义务。 优先股 是一种特殊股票，其 股息率固定 ，参与公司决策管理等权利受到一定限制，但在公司盈利和剩余财产分配上比普通股东享有 优先权 。 按是否记载股东姓名划分 记名股票 在股票票面和股份公司的股东名册上记载股东姓名的股票。一般股份有限公司向发起人、法人发行股票时，应为记名股票。需置备股东名册， 记载相关事项。 不记名股票 在股票票面和股份公司股东名册上均不记载股东姓名的股票，其与记名股票的差别不是在股东权利等方面，而是在股票的记载方式上。 按是否在股票上标明金额划分 有面额股票 是指在股票票面上记载一定的金额的股票，这一金额也称为票面金额、票面价值或股票面值。 无面额股票 是指在股票票面不记载股票面额，只注明它在公司总股本中所占比例的股票。 按股票的上市地区划分 A股 即人民币普通股，由中国境内公司发行、上市，境内机构和个人以人民币购买交易的股票。 B股 即人民币特种股，是由中国境内注册、上市的公司发行，以人民币标明面值的股票，但以其他货币认购和交易的股票。 H股 经证监会批准，注册地在内地，在香港市场上市，供境外投资者认购交易的股票。 #5、股票的价格 股票的理论价格 股票价格应由其价值决定，但股票本身没有价值，它之所以有价格是因为它代表着收益的价值，所以股票的理论价格就是对未来收益的评定。股票的现值就是未来收益的当前价值，也是人们为了得到股票的未来收益愿意付出的代价。 股票的理论价格为预测股票市场价格的变动趋势提供了重要的依据，也是股票市场价格形成的一个基础性因素。 股票的市场价格 指的是二级市场的交易价格，股票的交易价格是由它的价值决定的，但也受其他因素的影响，其中供求关系是最直接的影响因素。由于影响股票价格的因素复杂多变，所以股票的市场价格呈现出高低起伏的波动性特征。 影响股票市场价格变动的基本因素 #二、股票的发行#1、中国股票市场结构 1、主板市场 主板市场也称为 一板市场 ，是传统意义上的证券市场（通常指股票市场），是一个国家或地区证券发行、上市及交易的主要场所； 中国大陆主板市场的公司在上交所和深交所两个市场进行上市； 主板市场是资本市场中最重要的组成部分，很大程度上能够反映经济发展状况，有“ 国民经济晴雨表 ”之称； 主板市场上市门槛较高，对发行人的营业期限、股本大小、盈利水平、最低市值等方面都具有较高要求。通常能在主板上市的多为大型成熟企业，或处于某个行业的龙头地位，具有较大的资本规模及稳定的盈利能力。 2、中小板市场 中小板市场是深交所为了鼓励自主创新而专门设置的中小型公司聚集板块。在中小板上市的企业，行业地位虽然通常没有主板上市企业那么高，但其中部分企业成长性较强，上市后快速发展。 3、创业板市场 创业板市场又被称为 二板市场 ，是为具有高成长性的中小企业和高科技企业融资服务的资本市场。 创业板市场是不同于主板市场的独特的资本市场，具有前瞻性、高风险、监管要求严格以及明显的高技术产业导向的特点。 与主板市场相比，在创业板市场上市的企业规模较小、上市条件相对较低，中小企业更容易上市募集发展所需资金。 4、科创板市场 科创板是我国首个实行注册制的场内市场，主要服务于符合国家战略、突破关键核心技术、市场认可度高的科技创新企业。 科创板上市企业普遍具有技术新、研发投入规模大、盈利周期长、技术迭代快、盈利能力不稳定以及严重依赖核心项目、核心技术人员、少数供应商等特点，因此企业上市后的持续创新能力、主营业务发展的可持续性、公司收入及盈利水平等仍具有较大不确定性。 科创板重点关注三类企业 ： 符合国家战略、突破关键核心技术、市场认可度高的科技创新企业； 属于新一代信息技术、高端装备、新材料、新能源、节能环保以及生物医药等高新技术产业和战略性新兴产业的科技创新企业； 互联网、大数据、云计算、人工智能和制造业深度融合的科技创新企业。 5、新三板市场 新三板即为 全国中小企业股份转让系统 ，主要为创新型、创业型、成长型中小微企业发展服务。 新三板设立创新层和基础层，符合不同标准的挂牌公司分别纳入精选层、创新层和基础层管理。境内符合条件的股份公司均可通过主办券商申请在新三板挂牌，公开转让股份，进行股权融资、债券融资、资产重组等。 新三板构成了小微企业，特别是创新型小微企业直接融资的重要平台，尤其是对于既无法满足银行信贷审核要求，也无法满足A股上市条件的小微企业，新三板融资通道的作用更加凸显，是我国多层次资本市场的重要一环。 #2、股票发行制度股票发行监管制度 审批制 ：是一国在股票市场的发展初期，为了维护上市公司稳定和平衡复杂的社会经济关系，采用行政计划的办法分配股票发行的指标和额度，由地方或行业主管部门根据指标推荐企业发行股票的一种发行制度。 核准制 ：介于注册制和审批制之间的中间形式。一方面取消了指标额度管理，并引进证券中介机构的责任，判断企业是否达到股票的发行条件；另一方面证券监管机构对股票发行的合规性和适销性条件进行实质性审查，并有权否决股票发行的申请。 注册制 ：是在市场化程度较高的成熟股票市场所普遍采用的一种发行制度。证券监管部门公布股票发行的必要条件，只要达到所公布条件要求的企业即可发行股票。2020年3月1日起，我国开始全面推行注册制。 #3、首次公开发行IPO 首次公开发行股票（IPO） ，是指公司首次在证券市场公开发行股票募集资金并上市的行为。 #4、股权再融资 #5、股票退市制度 股票退市是指上市公司股票在证券交易所终止上市交易。退市制度是资本市场重要的基础性制度，有利于健全资本市场功能，增强市场主体活力，实现优胜劣汰，惩戒重大违法行为，保护投资者合法权益。 主动退市 ：上市公司通过对上市地位维持成本收益的理性分析，或者为便捷、高效地对公司治理结构、资产结构、人员结构等实施调整，或者为进一步实现公司股票的长期价值，可以依据《证券法》和证券交易所规则实现主动退市。 强制退市 ：证交所为维护公开交易股票的总体质量与市场信心，保护投资者合法权益，依照规则要求交投不活跃、股权分布不合理、市值过低而不再适合公开交易的股票应终止交易，特别是对于存在严重违法违规行为的公司，证交所可以依法强制其股票退出市场交易。 #三、股票的交易#1、证券交易原则 根据《证券法》规定，证券交易必须实行公开、公平、公正原则。 公开原则 ：又称为信息公开原则，指证券交易是一种面向社会的、公开的交易活动，其核心要求是实现市场信息的公开化，证券交易参与各方应依法及时、真实、准确、完整地向社会发布有关信息。 公平原则 ：是指参与交易的各方应当获得平等的机会。它要求证券交易活动中的所有参与者都有平等的法律地位，各自的合法权益都能得到公平保护。 公正原则 ：是指应当公正地对待证券交易的参与各方，以及公正地处理证券交易事务。在实践中，公正原则也体现在很多方面，例如，公正地办理证券交易中的各项手续，公正地处理证券交易中的违法违规行为等。 #2、股票竞价与成交 1、竞价原则 证券交易所内的证券交易按“ 价格优先、时间优先 ”原则竞价成交。 价格优先 ：较高价格买入申报优先于较低价格买入申报，较低价格卖出申报优先于较高价格卖出申报。 时间优先 ：买卖方向、价格相同的，先申报者优于后申报者。 2、竞价方式 目前，我国证券交易所采用两种竞价方式：集合竞价方式和 连续竞价方式 。 集合竞价 ：是指对在规定的一段时间内接受的买卖申报一次性集合撮合的竞价方式。 连续竞价 ：是指对买卖申报逐笔连续撮合的竞价方式。连续竞价的特点是，每一笔买卖委托输入交易自动撮合系统后，当即判断进行不同的处理：能成交者予以成交，不能成交者等待机会成交，部分成交者则让剩余部分继续等待。 3、交易结算 目前我国证券市场采用的是 法人结算模式 ，主要是指由证券公司以法人名义在证券登记结算机构开立证券交收账户和资金交收账户，其接受客户委托代理的证券交易的清算交收均通过此账户办理。 证券公司与客户之间的证券结算交收 ：委托中国结算公司根据成交记录按照业务规则代为办理。证券交收结果等数据由中国结算公司每日传送至证券公司，供其对账和向客户提供余额查询，证券公司根据中国结算公司数据，记录客户清算交收结果。 证券公司与客户之间的资金清算交收 ：需要由证券公司与指定商业银行配合完成 2021年7月7日 长沙","link":"/2021/07/07/finance/financeStudy-EP4/"},{"title":"S02E05 会计基础知识","text":"会计基础知识培训 一、会计的定义会计师以货币为主要的计量单位，反应和监督一个单位经济活动的一种经济管理活动。 二、会计的六要素收入、费用、利润、资产、负债、所有者权益资产的特征： 1、资产应为企业拥有或者控制的资源 2、资产预期会给企业带来经济利益 3、资产是由企业过去的交易或者事项形成的&lt;br&gt; 资产可以分为：流动资产 （货币基金、短期投资、存货和应收及预付款）非流动资产 （长期资产、固定资产、无形资产、其他资产） 负债可以分为：流动负债 （银行借款、应付以及预收款及应交款项）非流动负债 （长期借款、长期应付款及其他长期负债） 所有者权益（股东权益、净资产）：投资资本、留存资本、其他综合收益 其他综合权益：直接计入所有者权益的利得和损失（偶然性所得） 收入可以分为：主营业务收入、其他业务收入费用可以分为：计入成本的费用、期间费用利润可以分为：营业利润、营业外收支 三、会计等式和记账方法1、资产=负债+所有者权益2、收入-费用=利润3、资产=负债+所有者权益+（收入-费用）利润4、资产=负债+所有者权益会计要素变动的四种类型： 1、资产方与负债及所有者权益同时等额 增加，双方总额相等。 2、资产方与负债及所有者权益同时等额 减少，双方总额相等。 3、资产方内部项目有增有减，增减金额相等，双方总额不变。 4、负债及所有者权益内部项目有增有减，增减金额相等，双方总额不变。 记账方法按《企业会计准则》规定，所有企业、事业单位一律采用 借贷记账法借贷记账法以“借”和“贷”作为记账符号。以 “有借必有贷，借贷必相等”，作为记账原则。 四、会计的科目资产类、负债类、共同类、所有者权益类、损益类 借贷关系说明： 资产类科目记在借方表示增加，记在贷方表示减少； 负债类科目记在借方表示减少，记在贷方表示增加； 所有者权益记在借方表示减少，记在贷方表示增加； 收入记在借方表示减少，记在贷方表示增加； 费用记在借方表示增加，记在贷方表示减少； 利润记在借方表示减少，记在贷方表示增加； 2021年7月8日 长沙","link":"/2021/07/08/finance/financeStudy-EP5/"},{"title":"S02E06 估值财务系统","text":"估值财务系统培训 一、基金运营流程 &lt;br&gt; 估值财务系统的功能1、估值：估算价值 对股票、债券、回购、期货等基金购买持有的证券进行价值估算 2、财务：财务管理、核算 自动化会计凭证账务管理 通用财务报表 3、必要的数据处理能力总结：实现证券公司投资后的自动化会计核算，代替人工进行会计核算的基金财务核算系统估值财务基础模块划分估值流程说明估值系统参数基础参数： 基金代码 基金名称 管理人 管理人费率 托管人 托管人费率 成立时间 席位号 股东代码 头寸科目 科目设置：同类基金科目可复用 备付金与保证金 （最低）结算备付金： 保证金： 担保交收与非担保交收： 估值证券参数公共参数 所有基金通用参数，展示节假日信息。 估值方法场内交易市场数据流2021年7月8日 长沙","link":"/2021/07/08/finance/financeStudy-EP6/"},{"title":"S02E07 投资交易系统介绍","text":"投资交易系统介绍培训 1、金融市场 2、基金公司运作 3、基金公司组织架构 4、基金公司系统生态 5、产品管理 6、组合管理 组合分析支持不同维度的指标结果分析查询，支持如组合创建和管理、组合画像深度分析、风险画像风险测度、情景分析压力测试、组合智能配比优化、业绩分析收益归因的前端展示，并可根据金融机构要求将结果进行数据服务输出。 组合决策现针对不同投资业务的投前模拟交易建立投资组合，并可结合金融机构时点持仓、头寸、风险指标进行不同维度的组合试算。同时，可将最终结果给到交易管理完成后续业务处理。 7、运营管理 系统核心打造运营自动化管理，通过结算管理、资金监控管理、一键报送、数据自动风险管控，极大提高运营的工作效率，杜绝人工二次录入导致的人工风险。 8、估值核算 9、监管报送中心 2021年7月12日 长沙","link":"/2021/07/12/finance/financeStudy-EP7/"},{"title":"S02E08 注册登记系统介绍","text":"TA系统培训 然而源文件已经没了，令人感叹。 2021年7月13日 长沙","link":"/2021/07/13/finance/financeStudy-EP8/"},{"title":"S02E09 归纳与总结","text":"归纳与总结别看了，学不会的。 一、证券市场概述（一）有价证券定义：有价证券与虚拟资本 有价证券是指标有票面金额，用于证明持有人或该证券指定的特定主体对特定财产拥有所有权或债权的凭证。 1、证券本身没有价值； 2、但由于它代表着一定量的财产权利，持有人可凭该证券直接取得一定量的商品、货币，或是取得利息、股息等收入； 有价证券是虚拟资本的一种形式。所谓虚拟资本，是指以有价证券形式存在，并能给持有者带来一定收益的资本。虚拟资本是 相对独立于实际资本的一种资本存在形式 。通常，虚拟资本的价格总额并不等于所代表的真实资本的账面价格，甚至与真实资本的重置价格也不一定相等，其变化并不完全反映实际资本额的变化。 （二）有价证券分类12广义的有价证券：商品证券、货币证券、资本证券狭义有价证券：资本证券 商品证券是证明持有人拥有商品所有权或使用权的凭证。属于商品证券的有提货单、运货单、仓库栈单等。 货币证券是指本身能使持有人或第三者取得货币索取权的有价证券。货币证券主要包括两大类：一类是商业证券，主要是商业汇票和商业本票；另一类是银行证券，主要是银行汇票、银行本票和支票。 资本证券是指由金融投资或与金融投资有直接联系的活动而产生的证券。持有人有一定的收入请求权。资本证券是有价证券的主要形式。 有价证券按不同标准分类： 1、发行主体不同 ：政府证券、政府机构证券（禁止性规定）和公司证券（进一步细分） 我国目前尚不允许除特别行政区以外的各级地方政府发行债券。政府机构证券是由经批准的政府机构发行的证券，我国目前也不允许政府机构发行。 2、依照是否在证券交易所挂牌交易 上市证券 ：是指经证券主管机关核准发行，并经证券交易所依法审核同意，允许在证券交易所内公开买卖的证券。 非上市证券 ：是指未申请上市或不符合证券交易所上市条件的证券。非上市证券不允许在证券交易所内交易，但可以在其他证券交易市场交易。凭证式国债和普通开放式基金份额属于非上市证券。 3、按照募集方式分类 公募证券 ：指发行人向不特定的社会公众投资者公开发行的证券，审核较严格并采取公示制度。 私募证券 ：指向少数特定的投资者发行的证券，其审查条件相对宽松，投资者也较少，不采取公示制度。 4、按证券所代表的权利性质 股票、债券和其他。 股票和债券是证券市场两个最基本和最主要的品种。 （三）有价证券的特征 1、收益性 2、流动性 证券具有极高的流动性必须满足三个条件： 很容易变现 变现的交易成本极小 本金保持相对稳定 3、风险性 指实际收益与预期收益的背离，或者说是收益的不确定性。 从整体上说，证券的风险与其收益成正比。 4、期限性 债券一般有明确的还本付息期限。 股票一般没有期限性，可以视为无期证券。 二、证券市场1证券市场的定义：有价证券发行和交易的场所。 （一）证券市场的特征 价值直接交换的场所 ：有价证券是价值的一种直接表现形式 财产权利直接交换的场所 ：有价证券是财产权利的直接代表 风险直接交换的场所 ：转移的不仅是收益权，同时也包含风险 （二）证券市场结构 1、层次结构 按证券进入市场的顺序而形成的结构关系划分，证券市场的构成可分为发行市场和交易市场。 证券发行市场又称“一级市场”或“初级市场”。 证券交易市场又称“二级市场”或“次级市场”。 证券发行市场和流通市场的关系： 证券发行市场和流通市场相互依存、相互制约。证券发行市场是流通市场的基础和前提。流通市场是证券得以持续扩大发行的必要条件。此外，流通市场的交易价格制约和影响着证券的发行价格，是证券发行时需要考虑的重要因素。 证券市场的层次性还体现为区域分布、覆盖公司类型、上市交易制度以及监管要求的多样性。根据所服务和覆盖的上市公司类型，可分为全球性市场、全国性市场、区域性市场等类型； 根据上市公司规模、监管要求等差异，可分为主板市场、二板市场（创业板或高新企业板）；根据交易方式，可以分为集中交易市场、柜台市场等。 2、品种结构 3、交易场所结构 按交易活动是否在固定场所进行，证券市场可分为有形市场和无形市场。 有形市场称作“场内市场”，是指有固定场所的证券交易所市场。有形市场的诞生是证券市场走向集中化的重要标志之一。 无形市场称作为“场外市场”，是指没有固定交易场所的市场。目前场内市场与场外市场之间的截然划分已经不复存在，出现了多层次的证券市场结构。 （三）证券市场的基本功能1证券市场被称为国民经济的“晴雨表”。 1、筹资、投资功能 筹资和投资是证券市场基本功能不可分割的两个方面，忽视其中任何一个方面都会导致市场的严重缺陷。 2、定价功能 证券的价格是证券市场上证券供求双方共同作用的结果。 3、资本配置功能 是指通过证券价格引导资本的流动从而实现资本的合理配置的功能。 二、证券市场参与者一、证券发行人 （一）公司（企业） 企业的组织形式可分为独资制、合伙制和公司制。现代股份制公司主要采取股份有限公司和有限责任公司两种形式。 其中，只有股份有限公司才能发行股票。 （二）政府和政府机构 随着国家干预经济理论的兴起，政府（中央政府和地方政府）和中央政府直属机构已成为证券发行的重要主体之一，但政府发行证券的品种仅限于债券。 由于中央政府拥有税收、货币发行等特权。通常情况下，中央政府债券不存在违约风险，因此，这类证券被视为“无风险证券”，相对应的证券收益率被称为“无风险利率”，是金融市场上最重要的价格指标。 中央银行作为证券发行主体，主要涉及两类证券。 第一，类是中央银行股票，第二类是中央银行出于调控货币供给量目的而发行的特殊债券。中国人民银行从2003年起发行中央银行票据。 二、证券投资人 （一）机构投资者 1、政府机构：政府债券、金融债券 作为政府机构，参与证券投资的目的主要是为了调剂资金余缺和进行宏观调控。 中央银行以公开市场操作作为政策手段，通过买卖政府债券或金融债券，影响货币供应量进行宏观调控。 我国国有资产管理部门或其授权部门持有国有股，履行国有资产的保值增值和通过国家控股、参股来支配更多社会资源的职责。 从各国的具体实践看，出于维护金融稳定的需要，政府还可成立或指定专门机构参与证券市场交易，减少非理性的市场震荡。 2、金融机构 （1）证券经营机构 （2）银行业金融机构 根据《中华人民共和国商业银行法》规定，银行业金融机构可用自有资金买卖政府债券和金融债券。除国家另有规定外，在中华人民共和国境内不得从事信托投资和证券经营业务，不得向非自用不动产投资或者向非银行金融机构和企业投资。 《中华人民共和国外资银行管理条例》规定，外商独资银行、中外合资银行可买卖政府债券、金融债券，买卖股票以外的其他外币有价证券。 银行业金融机构因处置贷款质押资产而被动持有的股票，只能单向卖出。《商业银行个人理财业务管理暂行办法》规定，商业银行可以向个人客户提供综合理财服务，向特定目标客户群销售理财计划，接受客户的委托和授权，按照与客户事先约定的投资计划和方式进行投资和资产管理。 （3）保险经营机构 （4） 合格境外机构投资者 （QFII） QFII 制度是一国（地区）在货币没有实现完全可自由兑换、资本项目尚未完全开放的情况下，有限度地引进外资、开放资本市场的一项过渡性的制度。 合格境外机构投资者的境内股票投资，应当遵守中国证监会规定的持股比例限制和国家其他有关规定：单个境外投资者通过合格境外机构投资者持有一家上市公司股票的，持股比例不得超过该公司股份总数的10%；所有境外投资者对单个上市公司A股的持股比例总和，不超过该上市公司股份总数的20%。同时，境外投资者根据《外国投资者对上市公司战略投资管理办法》对上市公司战略投资的，其战略投资的持股不受上述比例限制。 （5） 主权财富基金 ：中国投资责任公司被视为中国主权财富基金的发端。07年成立 （6） 其他金融机构 ：包括信托投资公司、企业集团财务公司、金融租赁公司等等。 目前尚未批准金融租赁公司从事证券投资业务。 3、企业和事业法人 我国现行的规定是，各类企业可参与股票配售，也可投资于股票二级市场；事业法人可用自有资金和有权自行支配的预算外资金进行证券投资。 4、各类基金：证券投资基金、社保基金、企业年金和社会公益基金 （1）证券投资基金。 （2）社保基金。在大多数国家，社保基金分为两个层次： 其一是国家以社会保障税等形式征收的全国性基金； 其二是由企业定期向员工支付并委托基金公司管理的企业年金。 在我国，社保基金也主要由两部分组成：一部分是 社会保障基金 。另一部分是 社会保险基金 。社保基金的投资范围包括银行存款、国债、证券投资基金、股票、信用等级在投资级以上的企业债、金融债等有价证券。 （3）企业年金：投资的范围和投资的比例。 （4）社会公益基金 （二）个人投资者 个人投资者是指从事证券投资的社会自然人，他们是 证券市场最广泛的投资者 。 （三）投资者的风险特性与投资适当性 不同的投资者对风险的态度各不相同，理论上可以将其区分为风险偏好型、风险中立型和风险回避型三种类型。 实践中，金融机构通常采用客户调查问卷、产品风险评估与充分披露等方法，根据客户分级和资产分级匹配原则，避免误导投资者和错误销售。 投资适当性的要求就是“适合的投资者购买恰当的产品” 。 三、证券市场中介机构 （一）证券公司 证券公司又称证券商，是指依照《公司法》、《证券法》规定并经国务院证券监督管理机构批准经营证券业务的有限责任公司或股份有限公司。 （二）证券服务机构 证券投资咨询机构、财务顾问机构、资信评级机构、资产评估机构、会计师事务所、律师事务所等。 四、自律性组织 （一）证券交易所 （二）证券业协会 中国证券业协会是依法注册的具有独立法人地位的、由经营证券业务的金融机构自愿组成的行业性自律组织，是社会团体法人。中国证券业协会采取会员制的组织形式，协会的权力机构为全体会员组成的会员大会。中国证券业协会的自律管理体现在保护行业共同利益、促进行业共同发展方面，具体表现为：对会员单位的自律管理、对从业人员的自律管理和对代办股份转让系统的自律管理。 （三）证券登记结算机构 中国证券登记结算公司是为证券交易提供集中的登记、托管与结算服务，不以营利为目的的法人。 五、证券监管机构 中华人民共和国证券监督管理委员会及其派出机构。 二、股票市场概述第一节 股票的特征与类型一、股票的定义 （一）股票定义 股票是一种有价证券，它是股份有限公司签发的证明股东所持有股份的凭证。 我国《公司法》规定，股票采用纸面形式或者国务院证券监督管理机构规定的其他形式。 股票应载明的事项主要有：公司名称、公司成立的日期、股票种类、票面金额及代表的股份数、股票的编号。 股票由法定代表人签名，公司盖章。发起人的股票，应当标明“发起人股票”字样。 （二）股票的性质 1、股票是 有价证券 。股票具有有价证券的特征： 第一，虽然股票本身没有价值，但股票是一种代表财产权的有价证券； 第二，股票与它代表的财产权有不可分离的关系。 2、股票是 要式证券 。 股票应具备《公司法》规定的有关内容，如果缺少规定的要件，股票就无法律效力。 3、股票是 证权证券 。证券可分为设权证券和证权证券。 设权证券是指证券所代表的权利本来不存在，而是随着证券的制作而产生，即权利的发生是以证券的制作和存在为条件的。 证权证券是指证券是权利的一种物化的外在形式，它是权利的载体，权利是已经存在的。 4、股票是 资本证券 。 股票是投入股份公司资本份额的证券化，属于资本证券。股票独立于真实资本之外 ，在股票市场进行着独立的价值运动，是一种虚拟资本。 5、股票是 综合权利证券 。 股票不属于物权证券，也不属于债权证券，而是一种综合权利证券。股东权是一种综合权利，股东依法享有资产收益、重大决策、选择管理者等权利。 （三）股票的特征 1、 收益性 ：是 最基本的特征 。股票的收益来源可分成两类：一是来自于股份公司。二是来自于股票流通。 2、 风险性 ：股票风险的内涵是股票投资收益的不确定性，或者说实际收益与预期收益之间的偏离程度。风险不等于损失。 3、 流动性 ：判断流动性强弱的三个方面：市场深度、报价紧密度、价格弹性（恢复能力）。 需要注意的是，由于股票的转让可能受各种条件或法律法规的限制，因此，并非所有股票都具有相同的流动性。通常情况下，大盘股流动性强于小盘股，上市公司股票的流动性强于非上市公司股票，而上市公司股票又可能因市场或监管原因而受到转让限制，从而具有不同程度的流动性。 4、 永久性 ：是指股票所载有权利的有效性是始终不变的，因为它是一种无期限的法律凭证。 5、 参与性 ：是指股票持有人有权参与公司重大决策的特性。 二、股票的类型 （一）普通股票和优先股。 按股东享有权利的不同，股票可以分为普通股票和优先股票 。 1、普通股票。普通股票是最基本、最常见的一种股票，其持有者享有股东的基本权利和义务。在公司盈利较多时，普通股票股东可获得较高的股利收益，但在公司盈利和剩余财产的分配顺序上列在债权人和优先股票股东之后，故其承担的风险也比较高。与优先股票相比，普通股票是标准的股票，也是风险较大的股票。 2、优先股票。优先股票是一种特殊股票。优先股票的股息率是固定的，其持有者的股东权利受到一定限制。但在公司盈利和剩余财产的分配上比普通股票股东享有优先权。 （二）记名股票和不记名股票 股票按是否记载股东姓名，可分为记名股票和不记名股票。 1、记名股票。 我国《公司法》规定，公司发行的股票可以为记名股票，也可以为无记名股票。股份有限公司向发起人、法人发行的股票，应当为记名股票，并应当记载该发起人、法人的名称或者姓名，不得另立户名或者以代表人姓名记名。公司发行记名股票的，应当置备股东名册，记载下列事项：股东的姓名或者名称及住所、各股东所持股份数、各股东所持股票的编号、各股东取得股份的日期。 记名股票有如下 特点 ： （1）股东权利归属于记名股东。 （2）可以一次或分次缴纳出资。 （3）转让相对复杂或受限制（股东以背书方式或者法律、行政法规规定的其他方式转让）。 （4）便于挂失，相对安全。 2、无记名股票。 我国《公司法》规定，发行无记名股票的，公司应当记载其股票数量、编号及发行日期。 无记名股票有如下特点： （1）股东权利归属股票的持有人。 （2）认购股票时要求一次缴纳出资。 （3）转让相对简便（交付转让）。 （4）安全性较差。 （三）有面额股票和无面额股票 1、有面额股票。所谓有面额股票，是指在股票票面上记载一定金额的股票。这一记载的金额也称为 票面金额、票面价值或股票面值 。我国《公司法》规定，股份有限公司的资本划分为股份，每一股的金额相等。 有面额股票有如下 特点 ： （1）可以明确表示每一股所代表的股权比例。 （2）为股票发行价格的确定提供依据。我国《公司法》规定股票发行价格可以按票面金额，也可以超过票面金额，但不得低于票面金额。有面额股票的票面金额就是股票发行价格的最低界限。 2、无面额股票。是指在股票票面上不记载股票面额，只注明它在公司总股本中所占比例的股票。无面额股票也称为 比例股票或份额股票 。无面额股票淡化了票面价值的概念，但仍然有内在价值，它与有面额股票的差别仅在表现形式上。也就是说，它们都代表着股东对公司资本总额的投资比例，股东享有同等的股东权利。 目前世界上很多国家（包括中国）的公司法规定不允许发行这种股票。 无面额股票有如下特点： （1）发行或转让价格较灵活； （2）便于股票分割。 第二节 股票的价值与价格一、股票的价值 （一）股票的票面价值 又称面值，即在股票票面上标明的金额。该种股票被称为有面额股票。 如果以面值作为发行价，称为平价发行，此时公司发行股票募集的资金等于股本的总和，也等于面值总和。发行价值高于面值称为溢价发行，募集的资金中等于面值总和的部分计入资本账户，以超过股票票面金额的发行价值发行股份所得的溢价款列为公司资本公积金。 （二）股票的账面价值 股票的账面价值又称股票净值或每股净资产 ，在没有优先股的条件下，每股账面价值等于公司净资产除以发行在外的普通股票的股数。 但是通常情况下，并不等于股票价格。 主要原因有两点： 一是会计价值通常反映的是历史成本或者按某种规则计算的公允价值，并不等于公司资产的实际价格； 二是账面价值并不反映公司的未来发展前景。 （三）股票的清算价值 股票的清算价值是公司清算时每一股份所代表的实际价值 。 （四）股票的内在价值 股票的内在价值即理论价值，也即股票未来收益的现值。股票的内在价值决定股票的市场价格，股票的市场价格总是围绕其内在价值的波动。 二、股票的价格 （一）股票的理论价格 股票及其他有价证券的理论价格就是以一定的必要收益率计算出来的未来收入的现值。 （二）股票的市场价格 股票的市场价值一般是指股票在二级市场上交易的价格。 供求关系是股票价格最直接的影响因素，其他因素都是通过作用于供求关系而影响股票价格的。 （三）影响股票价格的因素 供求关系是最直接的影响因素。根本因素：预期。 分析股价变动的因素，就是要梳理影响供求关系变化的深层次原因。 三、影响股价变动的基本因素 （一）公司经营状况 股价公司的经营现状和未来发展是股票价格的基石。 1、公司治理水平和管理层质量。 对于公司治理情况的分析主要包括公司股东、管理层、员工及其他外部利益相关者之间的关系及其制衡状况，公司董事会、监事会构成及运作等因素。 2、公司竞争力。 最常用的公司竞争力分析框架是所谓的SWOT分析，它提出了4个考察维度，即公司经营中存在的优势、劣势、机会与威胁。 3、行业生命周期。 幼稚期、成长期、成熟期、稳定期4个阶段。 （三）宏观经济与政策因素 宏观经济发展水平和状况是影响股票价格的重要因素。宏观经济影响股票价值的特点是波及范围广、干扰程度深、作用机制复杂和股价波动幅度较大。 1、经济增长。当一国或地区的经济运行势态良好时，大多数企业的经营状况也较良好，它们的股价会上升；反之股价会下降。 2、经济周期循环。社会经济运行经常表现为扩张与收缩的周期性交替，每个周期一般都要经过高涨、衰退、萧条、复苏四个阶段。 股价的变动通常比实际经济的繁荣或衰退领先一步。所以股价水平已成为经济周期变动的灵敏信号或称先导性指标 。 3、货币政策。 中央银行通常采用存款准备金制度、再贴现政策、公开市场业务等货币政策手段调控货币供应量，从而实现发展经济、稳定货币等政策目标。 （1）中央银行提高法定存款准备金率，商业银行可贷资金减少，市场资金趋紧，股价下降；中央银行降低法定存款准备金率，商业银行可贷资金增加，市场资金趋松，股价上升。 （2）中央银行通过采取再贴现政策手段，提高再贴现率，收紧银根、使商业银行得到的中央银行贷款减少，市场资金趋紧；再贴现率又是基准利率，它的提高必定使市场利率随之提高。 （3）中央银行通过公开市场业务大量出售证券，收紧银根，在收回中央银行供应的基础货币的同时又增加证券的供应，使证券价格下降。 4、财政政策。财政政策对股票价格的影响包括： 其一，通过扩大财政赤字、发行国债筹集资金，增加财政支出，刺激经济发展；或是通过增加财政盈余或降低赤字，减少财政支出，抑制经济增长，以此影响股价。 其二，通过调节税率影响企业利润和股息。 其三，干预资本市场各类交易适用的税率，如利息税、资本利得税、印花税等。 其四，国债发行量会改变证券市场的证券供应和资金需求，从而间接影响股价。 第三节 普通股票和优先股票一、普通股票 （一）普通股票股东的权利 普通股票股东的权利： 1、公司重大决策参与权 股东基于股票的持有而享有股东权，这是一种综合权利，其中首要的是可以以股东身份参与股份公司的重大事项决策。 股东大会一般每年定期召开一次年会，当出现董事会认为必要或监事会提议召开、单独或者合计持有公司10%以上股份的股东请求等情形时，也可召开临时股东大会。股东会议由股东按出资比例行使表决权，但公司章程另有规定的除外。股东出席股东大会，所持每股份有一表决权。股东大会作出决议必须经出席会议的股东所持表决权过 半数通过 。股东大会作出修改公司章程、增加或减少注册资本的决议，以及公司合并、分立、解散或者变更公司形式的决议，必须经出席会议的股东所持表决权的2/3以上通过。股东大会选举董事、监事，可以依照公司章程的规定或者股东大会的决议，实行累积投票制。累积投票制是指股东大会选举董事或者监事时，每一股份拥有与应选董事或者监事人数相同的表决权，股东拥有的表决权可以集中使用。股东可以亲自出席股东大会，也可以委托代理人出席。 对于规定的上市公司重大事项，必须经全体股东大会表决通过，并经参加表决的社会公众股股东所持表决权的半数以上通过，方可实施或提出申请 。规定的上市公司重大事项分为5类：增发新股、发行可转债、配股；重大资产重组，购买的资产总价较所购买资产经审计的账面净值溢价达到或超过20%的；股东以其持有的上市公司股权偿还其所欠该公司的债务；对上市公司有重大影响的附属企业到境外上市；在上市公司发展中对社会公众股股东利益有重大影响的相关事项。 2、公司资产收益权和剩余资产分配权 这个权利表现在： （1）普通股股东有权按照实缴的出资比例分配红利，但全体股东约定不按照出资比例分取红利的除外； （2）普通股股东在股份公司解散清算时，有权要求取得公司的剩余资产。 我国有关法律规定，公司缴纳所得税后的利润，在支付普通股票的红利之前，应按如下顺序分配：弥补亏损，提取法定公积金，提取任意公积金。 按我国《公司法》规定，公司财产在分别支付清算费用、职工的工资、社会保险费用和法定补偿金，缴纳所欠税款，清偿公司债务后的剩余财产，按照股东持有的股份比例分配。公司财产在未按照规定清偿前，不得分配给股东。 3.其他权利 主要权利： 第一，股东有权查阅公司章程、股东名册等。（查阅权、建议权和质询权） 第二，股东持有的股份可依法转让。（依法转让权） 第三，公司为增加注册资本发行新股时，股东有权按照实缴的出资比例认购新股。（优先认股权） 优先认股权是指当股份公司为增加公司资本而决定增加发行新的股票时，原普通股股东享有的按其持股比例、以低于市价的某一特定价格优先认购一定数量新发行股票的权利。赋予股东这种权利有两个 主要目的 ：一是能保证普通股股东在股份公司中保持原有的持股比例；二是能保护原普通股股东的利益和持股价值。 享有优先认股权的股东可以有 三种选择 ： 一是行使权利来认购新发行的普通股票； 二是如果法律允许，可以将该权利转让给他人，从中获得一定的报酬； 三是不行使此权利而听任其过期失效。普通股票股东是否具有优先认股权，取决于认购时间与股权登记日的关系。 二、优先股票 （一）优先股定义 优先股票与普通股票相对应，是指股东享有某些优先权利的股票。 首先，对股份公司而言，发行优先股票的作用在于可以筹集长期稳定的公司股本，又因其股息率固定，可以减轻股息的分派负担。 另外，优先股票股东无表决权，这样可以避免公司经营决策权的改变和分散。 其次，对投资者而言，由于优先股票的股息收益稳定可靠，而且在财产清偿时也先于普通股票股东，因而风险相对较小，不失为一种较安全的投资对象。 （二）优先股票的特征 1、股息率固定。普通股票的股息是不固定的，它取决于股份公司的经营状况和盈利水平。 2、股息分派优先。在股份公司盈利分配顺序上，优先股排在普通股票之前。 3、剩余资产分配优先。当股份公司因解散或破产进行清算时，在对公司剩余资产的分配上，优先股票股东排在债权人之后、普通股票股东之前。 4、一般无表决权。优先股票股东权利是受限制的，最主要的是表决权限制。 （三）优先股票的种类 1、 累积优先股票和非累积优先股票 。 这种分类的依据是优先股股息在当年未能足额分派时，能否在以后年度补发。 所谓累积优先股票，是指历年股息累积发放的优先股票。 非累积优先股票，是指股息当年结清、不能累积发放的优先股票。非累积优先股票的特点是股息分派以每个营业年度为界，当年结清。 2、 参与优先股票和非参与优先股票 。 这种分类的依据是优先股票在公司盈利较多的年份里，除了获得固定的股息以外，能否参与或部分参与本期剩余盈利的分配。 参与优先股票，是指优先股票股东除了按规定分得本期固定股息外，还有权与普通股股东一起参与本期剩余盈利分配的优先股票。 非参与优先股票，是指除了按规定分得本期固定股息外，无权再参与对本期剩余盈利分配的优先股票。非参与优先股票是一般意义上的优先股票，其优先权不是体现在股息多少上，而是在分配顺序上。 3、 可转换优先股票和不可转换优先股票 。 这种分类的 依据是优先股票在一定的条件下能否转换成其他品种 。 可转换优先股票，是指发行后，在一定条件下允许持有者将它转换成其他种类股票的优先股票。在大多数情况下，股份公司的转换股票是由优先股票转换成普通股票，或者由某种优先股票转换成另一种优先股票。 不可转换优先股票，是指发行后不允许其持有者将它转换成其他种类股票的优先股票。不可转换优先股票与转换优先股票不同，它没有给投资者提供改变股票种类的机会。 4、 可赎回优先股票和不可赎回优先股票 。 这种分类的依据是在一定条件下， 该优先股票能否由原发行的股份公司出价赎回 。 股份公司一旦赎回自己的股票，必须在短期内予以注销。 5、 股息率可调整优先股票和股息率固定优先股票 。 这种分类的 依据是股息率是否允许变动 。 第四节 我国的股票类型一、我国的股票类型 （一）按投资主体性质分类 1、国家股 国家股是指有权代表国家投资的部门或机构以国有资产向公司投资形成的股份，包括公司现有国有资产投资形成的股份。 国家股从资金来源上看，主要有三个方面：第一，现有国有企业改组为股份公司时所拥有的净资产；第二，现阶段有权代表国家投资的政府部门向新组建的股份公司的投资；第三，经授权代表国家投资的投资公司、资产经营公司、经济实体性总公司等机构向新组建股份公司的投资。 三、债券市场概述第一节 债券的特征与类型一、债券的定义与特征 （一）债券的定义 债券是一种有价证券，是社会各类经济主体为筹集资金而向债券投资者出具的、承诺按一定利率定期支付利息并到期偿还本金的债权债务凭证。 债券上规定资金借贷的权责关系主要有三点： 第一，所借贷货币的数额； 第二，借款时间； 第三，在借贷时间内应有的补偿或代价是多少（即债券的利息）。 债券包含四个方面的含义： 第一，发行人是借入资金的经济主体； 第二，投资者是出借资金的经济主体； 第三，发行人需要在一定时期付息还本； 第四，债券反映了发行者和投资者之间的债权、债务关系，而且是这一关系的法律凭证。 债券的基本性质 1、债券属于有价证券。首先，债券反映和代表一定的价值。其次，债券与其代表的权利联系在一起。 2、债券是一种虚拟资本。 3、债券是债权的表现。 （二）债券的票面要素 1、债券的票面价值。债券的票面价值是债券票面标明的货币价值，是债券发行人承诺在债券到期日偿还给债券持有人的金额。 债券的票面价值要标明的内容主要有：要标明币种，要确定票面的金额。票面金额大小不同，可以适应不同的投资对象，同时也会产生不同的发行成本。 票面金额定得较小，有利于小额投资者，购买持有者分布面广，但债券本身的印刷及发行工作量大，费用可能较高； 票面金额定得较大，有利于少数大额投资者认购，且印刷费用等也会相应减少，但使小额投资者无法参与。 因此，债券票面金额的确定也要根据债券的发行对象、市场资金供给情况及债券发行费用等因素综合考虑。 2、债券的到期期限。债券到期期限是指债券从发行之日起至偿清本息之日止的时间，也是债券发行人承诺履行合同义务的全部时间。 决定偿还期限的主要因素：资金使用方向、市场利率变化、债券变现能力。 一般来说，当未来市场利率趋于下降时，应发行期限较短的债券； 而当未来市场利率趋于上升时，应发行期限较长的债券，这样有利于降低筹资者的利息负担。 3、债券的票面利率 影响票面利率的因素： 第一，借贷资金市场利率水平。 第二，筹资者的资信。 第三，债券期限长短。 一般来说，期限较长的债券流动性差，风险相对较大，票面利率应该定得高一些；而期限较短的债券流动性强，风险相对较小，票面利率就可以定得低一些。 4、债券发行者名称 这一要素指明了该债券的债务主体。 需要说明的是，以上4个要素虽然是债券票面的基本要素，但它们并非一定在债券票面上印制出来。在许多情况下，债券发行者是以公布条例或公告形式向社会公开宣布某债券的期限与利率。 此外，债券票面上有时还包含一些其他要素，如，附有赎回选择权、附有出售选择权、附有可转换条款、附有交换条款、附有新股认购条款等等。 （三）债券的特征 1、 偿还性 。偿还性是指债券有规定的偿还期限，债务人必须按期向债权人支付利息和偿还本金。这一特征与股票的永久性有很大的区别。 2、 流动性 。是指债券持有人可按需要和市场的实际状况，灵活地转让债券，以提前收回本金和实现投资收益。流动性首先取决于市场为转让所提供的便利程度；其次取决于债券在迅速转变为货币时，是否在以货币计算的价值上蒙受损失。 安全性 。 一般来说，具有高度流动性的债券同时也是较安全的，因为它不仅可以迅速地转换为货币，而且还可以按一个较稳定的价格转换。 债券投资不能收回的两种情况： 第一，债务人不履行债务，即债务人不能按时足额履行约定的利息支付或者偿还本金。 第二，流通市场风险，即债券在市场上转让时因价格下跌而承受损失。 4、 收益性 。 在实际经济活动中，债券收益可以表现为三种形式： 一是利息收入； 二是资本损益，即债权人到期收回的本金与买入债券或中途卖出债券与买入债券之间的价差收入。 三是再投资收益。 二、债券的分类 （一）按发行主体分类 1、政府债券。政府债券的发行主体是政府。中央政府发行的债券称为国债，其主要用途是解决由政府投资的公共设施或重点建设项目的资金需要和弥补国家财政赤字。有些国家把政府担保的债券也划归为政府债券体系，称为政府保证债券。 2、金融债券。发行主体是银行或非银行的金融机构。金融机构一般有雄厚的资金实力，信用度较高，因此，金融债券往往也有良好的信誉。它们发行债券的目的的主要有：筹资用于某种特殊用途；改变本身的资产负债结构。金融债券的期限以中期较为多见。 3、公司债券。是公司依照法定程序发行、约定在一定期限还本付息的有价证券。 （二）按计息与付息方式分类：零息债券、附息债券、息票累积债券 1、零息债券。也称零息票债券，指债券合约未规定利息支付的债券。通常，这类债券以低于面值的价格发行和交易，债券持有人实际上是以买卖（到期赎回）价差的方式取得债券利息。 2、附息债券。债券合约中明确规定，在债券存续期内，对持有人定期支付利息（通常每半年或每年支付一次）。按照计息方式的不同，这类债券还可细分为固定利率债券和浮动利率债券，有些付息债券可以根据合约条款推迟支付定期利率，故称为缓息债券。 3、息票累积债券：与附息债券相似，这类债券也规定了票面利率，但是，债券持有人必须在债券到期时一次性获得还本付息，存续期间没有利息支付。 （三）按债券形态分类 1、实物债券 ：实物债券是一种具有标准格式实物券面的债券。在标准格式的债券券面上，一般印有债券面额、债券利率、债券期限、债券发行人全称、还本付息方式等各种债券票面要素。有时债券利率、债券期限等要素也可以通过公告向社会公布，而不在债券券面上注明。 2、凭证式债券 ：凭证式债券的形式是债权人认购债券的一种收款凭证，而不是债券发行人制定的标准格式的债券。 特点：可记名、挂失、不能上市流通。可以到原购买网点提前兑取。 3、记账式债券 ：记账式债券是没有实物形态的债券，利用证券账户通过电脑系统完成债券发行、交易及兑付的全过程。 特点：可以记名、挂失，安全性较高。发行时间短，发行效率高，交易手续简便，成本低，交易安全。 三、债券与股票的比较 （关注多选题） （一）债券与股票的相同点 1、两者都属于有价证券。 2、两者都是筹措资金的手段。 3、两者的收益率相互影响。 （二）债券与股票的区别 1、二者权利不同：债券是债权凭证。股票则不同，股票是所有权凭证。 2、二者目的不同：发行债券是公司追加资金的需要，它属于公司的负债，不是资本金。发行股票则是股份公司创立和增加资本的需要，筹措的资金列入公司资本。 3、二者期限不同：债券有偿还期，而股票具有永久性。 4、二者收益不同：债券利息固定，而股票的红利股息不固定。 5、二者风险不同：股票风险较大，债券风险相对较小。 因为： 第一，债券利息是公司的固定支出，属于费用范围；股票的股息红利是公司利润的一部分，公司有盈利才能支付，而且支付顺序列在债券利息支付和纳税之后。 第二，倘若公司破产，清理资产有余额偿还时，债券偿付在前，股票偿付在后。 第三，在二级市场上，债券因其利率固定，期限固定，市场价格也较稳定；而股票无固定期限和利率，受各种宏观因素和微观因素的影响，市场价格波动频繁，涨跌幅度较大。 第二节 政府债券一、政府债券概述 （一）政府债券的定义 政府债券的发行主体是政府，它是指政府财政部门或其他代理机构为筹集资金，以政府名义发行的、承诺在一定时期支付利息和到期还本的债务凭证。 中央政府发行的债券称为中央政府债券或者国债，地方政府发行的债券称为地方政府债券；有时也将二者统称为公债。 （二）政府债券的性质： 第一，从形式上看，政府债券是一种有价证券，它具有债券的一般性质。 第二，从功能上看，政府债券最初仅仅是政府弥补赤字的手段，但在现代商品经济条件下，政府债券已成为政府筹集资金、扩大公共事业开支的重要手段，并且随着金融市场的发展，逐渐具备了金融商品和信用工具的职能，成为国家实施宏观经济政策、进行宏观调控的工具。 （三）政府债券的特征 1、安全性高。 在各类债券中，政府债券的信用等级是最高的，通常被称为“金边债券”。投资者购买政府债券，是一种较安全的投资选择。 2、流通性强。 由于政府债券的信用好、竞争力强，市场属性好，所以，许多国家政府债券的二级市场十分发达，一般不仅允许在证券交易所上市交易，还允许在场外市场买卖。 3.收益稳定。 4.免税待遇。 在政府债券与其他证券名义收益率相等的情况下，如果考虑税收因素，持有政府债券的投资者可以获得更多的实际投资收益。 三、证券投资基金第一节 证券投资基金概述一、证券投资基金 （一）证券投资基金的产生与发展 证券投资基金是指通过公开发售基金份额募集资金,由基金托管人托管，由基金管理人管理和运用资金，为基金份额持有人的利益，以资产组合方式进行证券投资的一种利益共享、风险共担的集合投资方式。 各国对证券投资基金的称谓不尽相同，如美国称“共同基金”，英国和我国香港地区称“单位信托基金”，日本和我国台湾地区则称“证券投资信托基金”等。 英国1868年由政府出面组建了海外和殖民地政府信托组织，公开向社会发售受益凭证。 基金起源于英国， 基金产业已经与银行业、证券业、保险业并驾齐驱，成为现代金融体系的四大支柱 。 （二）我国证券投资基金业发展概况 1997年11月，国务院颁布《证券投资基金管理暂行办法》；l998年3月，两只封闭式基金——基金金泰、基金开元设立，分别由国泰基金管理公司和南方基金管理公司管理。2004年6月1日，我国《证券投资基金法》正式实施。 证券投资基金业从此进入崭新的发展阶段，基金数量和规模迅速增长，市场地位日趋重要，呈现出下列特点： 1、基金规模快速增长，开放式基金后来居上，逐渐成为基金设立的主流形式。 2、基金产品差异化日益明显，基金的投资风格也趋于多样化。 3、中国基金业发展迅速，对外开放的步伐加快。 （三）证券投资基金的特点 1、集合投资。基金的特点是将零散的资金汇集起来，交给专业机构投资于各种金融工具，以谋取资产的增值。基金对投资的最低限额要求不高，投资者可以根据自己的经济能力决定购买数量，有些基金甚至不限制投资额大小。 2、分散风险。以科学的投资组合降低风险、提高收益是基金的另一大特点。 3、专业理财。将分散的资金集中起来以信托方式交给专业机构进行投资运作，既是证券投资基金的一个重要特点，也是它的一个重要功能。 二、证券投资基金的分类 （一）按基金的组织形式不同，基金可分为契约型基金和公司型基金。 契约型基金又称为单位信托，是指将投资者、管理人、托管人三者作为基金的当事人，通过签订基金契约的形式发行受益凭证而设立的一种基金。 公司型基金是依据基金公司章程设立，在法律上具有独立法人地位的股份投资公司。 公司型基金在组织形式上与股份有限公司类似，由股东选举董事会，由董事会选聘基金管理公司，基金管理公司负责管理基金的投资业务。 1、公司型基金的特点： （1）基金的设立程序类似于一般的股份公司，基金本身为独立法人机构。但不同于一般股份公司的是，它委托基金管理公司作为专业的财务顾问或管理公司来经营、管理基金资产。 （2）基金的组织结构与一般股份公司类似，设有董事会和持有人大会。基金资产归基金所有。 2、契约型基金与公司型基金的区别： （1）资金的性质不同。契约型基金的资金是通过发行基金份额筹集起来的信托财产；公司型基金的资金是通过发行普通股票筹集的公司法人资本。 （2）投资者的地位不同。契约型基金的投资者既是基金的委托人，又是基金的受益人，即享有基金的受益权。公司型基金的投资者对基金运作的影响比契约型基金的投资者大。 （3）基金的营运依据不同。契约型基金依据基金契约营运基金，公司型基金依据基金公司章程营运基金。 （二）按基金运作方式不同，基金可分为封闭式基金和开放式基金。 封闭式基金是指经核准的基金份额总额在基金合同期限内固定不变，基金份额可以在依法设立的证券交易场所交易，但基金份额持有人不得申请赎回原基金。 决定基金期限长短的因素主要有两个： 一是基金本身投资期限的长短。 二是宏观经济形势。 开放式基金是指基金份额总额不固定，基金份额可以在基金合同约定的时间和场所申购或者赎回的基金。 三、管理人与托管人 （一）基金管理人的概念 基金管理人是负责基金发起设立与经营管理的专业性机构，不仅负责基金的投资管理，而且承担着产品设计、基金营销、基金注册登记、基金估值、会计核算和客户服务等多方面的职责。 我国《证券投资基金法》规定， 基金管理人由依法设立的基金管理公司担任 。基金管理公司通常由证券公司、信托投资公司或其他机构等发起成立，具有独立法人地位。 基金管理人作为受托人，必须履行“诚信义务”。 基金管理人的目标函数是受益人利益的最大化 ，因而，不得出于自身利益的考虑损害基金持有人的利益。 （二）证券投资基金托管人 为充分保障基金投资者的权益，防止基金资产被挪作他用，各国的证券投资信托法规都规定必须由某一托管机构，即基金托管人来对基金管理机构的投资操作进行监督和保管基金资产。 （一）基金托管人的概念 基金托管人又称基金保管人，是根据法律法规的要求，在证券投资基金运作中承担资产保管、交易监督、信息披露、资金清算与会计核算等相应职责的当事人。基金托管人是基金持有人权益的代表，通常由有实力的商业银行或信托投资公司担任。基金托管人与基金管理人签订托管协议，在托管协议规定的范围内履行自己的职责并收取一定的报酬。 （二）基金托管人的条件 基金托管人应该是完全独立于基金管理机构、具有一定的经济实力、实收资本达到一定规模、具有行业信誉的金融机构。 我国《证券投资基金法》规定，基金托管人由依法设立并取得基金托管资格的商业银行担任。 （三）证券投资基金当事人之间的关系 （一）持有人与管理人之间的关系 基金份额持有人与基金管理人之间的关系是委托人、受益人与受托人的关系，也是所有者和经营者之间的关系。 （二）管理人与托管人之间的关系 基金管理人与托管人的关系是相互制衡的关系。基金管理人是基金的组织者和管理者，负责基金资产的经营，是基金运营的核心；托管人由主管机关认可的金融机构担任，负责基金资产的保管，依据基金管理机构的指令处置基金资产并监督管理人的投资运作是否合法合规。这种相互制衡的运行机制，有利于基金信托财产的安全和基金运用的绩效。但是这种机制的作用得以有效发挥的前提是基金托管人与基金管理人必须严格分开，由不具有任何关联关系的不同机构或公司担任，两者在财务上、人事上、法律地位上应该完全独立。 （三）持有人与托管人之间的关系 基金份额持有人与托管人的关系是委托与受托的关系，也就是说，基金份额持有人将基金资产委托给基金托管人保管。 2021年7月14日 长沙","link":"/2021/07/14/finance/financeStudy-EP9/"},{"title":"写在 Gitee 图床挂了之后","text":"2022年3月25日起，Gitee图床外链开始无法访问。甚至有些仓库直接被禁：当前仓库由于大量外链被屏蔽，暂时无法正常访问…… 起因大早上的刷头条说gitee图床挂了，惊得我立马起床打开电脑去看我的博客，果然如此，图片都打不开了，将图片链接直接在浏览器打开后显示的却是gitee的logo，我擦。。。 想起去年的时候gitee就曾搞过这么一出，也是图片无法外链访问，后来过了几天自己好了，当时我也就没太在意。 毕竟白嫖的，咱也不好骂人不是，还是赶紧想想解决方法吧 经过看到网友们的解决办法，也就是下面的几种： 七牛云 阿里云oss/腾讯云oss github 当然还有其他的我就不一一列举了。 嗯，还是说说我自己的解决方法吧。 之前有了解过七牛云，怎么说呢，你别看什么每个月给你免费10G的流量，但一细看其实是只有http域名才免流量，而https并不是免费的。我之前是用的自己的域名，然后申请的https证书。麻烦的地方就是每隔三个月需要手动的更换一次https证书。如果忘记了更改那图片就访问不了了。 七牛云主要的扣费点还是https的流量费，每个月博客访问量少的话大概10块钱以内吧，具体还是要看你的图片请求量多少来算。 后来就换到了gitee仓库。当时没考虑用github的原因还是 “众所周知” 你懂得。 对于oss来说，个人是感觉太重了。不过花钱买安心，也算是一个不错的选择。 不过这里我需要提醒一点，你购买时花的钱仅仅是容量费，后续的使用是需要花流量费的。而流量费可不是一笔小数目。建议可以体验几个月后再下决心使用。 最后看了一下发现 Github + jsDelivr 实现图床的方法，对于白嫖党来说应该算是一个不错的选择了。 结果配置方法比较简单，这里我就不详细的说了。 我使用的图片上传工具是 PicGo 这里简单讲描述一下： CDN地址：https://cdn.jsdelivr.netpicGo中配置：https://cdn.jsdelivr.net/gh/用户名/仓库名 其他的方案，比如七牛云（这个需要弄域名备案），腾讯云（有免费存储空间，半年期限）。 所以想用免费的，最佳选择还是 github 仓库做图床。 刚刚看到有人评论说 gitee 仓库的图片又可以查看了，可惜呀。。。我已经 删库跑路 了。 尾巴那既然事情已经发生了，无论 Gitee 官方到底是临时还是永久添加了防盗链，我都不建议大家继续使用 Gitee 作为图床（本身它还有 1 M 图片大小的限制）。而是应该使用七牛云、或者腾讯 / 阿里等云服务厂商提供的稳定的对象存储服务。 当然如果你非要拿代码托管平台做图床，建议去薅鹅毛： CODING CODING的使用条款里没有类似的限制，鹅厂八成也不在乎那点带宽，我就拿CODING存了一堆素材跑自己的项目，两年多了还是好好的。不过按照大厂的尿性，我也不知道CODING这个项目会不会有一天突然就被砍了，总之先用着吧……","link":"/2022/03/28/thoughts/gitee-Image-Host/"},{"title":"hexo-theme-test","text":"一个半途而废的Hexo主题开发计划 开发计划之前心血来潮打算自己做一个主题，名字还没想好，先叫 test 吧。不过最近发现了一个很好看的主题，感觉有点懒得折腾自己的主题了，希望能给自己列个计划排期，希望有朝一日可以用上这个主题。（大概率不会完成） 项目预览 当前进度首页 顶部导航 ✓ 文章列表 ✓ 个人介绍 ✓ 底部版权 ✓ 搜索功能 ing 文章页 文章标题 ✓ 文章内容 ✓ 文章作者 ing 文章时间 ing 文章阅读统计 ing 文章目录 ing 分类页 分类列表 ✓ 分类跳转 ing 标签页 标签列表 ✓ 标签跳转 ing 其他功能 渲染模板由ejs换为jsx ing 全局页面响应式 ing 全局数据可配置 ing 全局深色模式 × （伪需求） 暂不考虑 站长统计 评论插件 切换主题色 看板娘 鼠标效果 后续计划当主题基本可用的时候我会上传到 Github有想玩玩的可以去催更 （当然做不做完全看我心情） Why Hexo ?了解详情","link":"/2022/02/12/thoughts/hexo-them-test/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2017/12/02/thoughts/hello-world/"},{"title":"vuepress-theme-reco","text":"这是一个vuepress主题，旨在添加博客所需的分类、TAB墙、分页、评论等能； 主题追求极简，根据 vuepress 的默认主题修改而成，官方的主题配置仍然适用； 你可以打开 午后南杂 来查看效果。 UseBuild 12345npm run build# oryarn build Server 12345npm run dev# oryarn dev Play Together0.xvuepress-theme-reco@0.x 是基于 vuepress@0.x 的博客主题。 vuepress@0.x 功能比较简单，只适合书写简单的文档，但好在支持主题自定义，而个人又希望能够用它来书写博客，原因就是它足够的简洁，毫无疑问，这也符合很多程序员的观念，也就是在这种情况下，vuepress-theme-reco@0.x 的第一个版本经过一个通宵而产生。 主题开源不久，很多朋友通过各种联系方式，给到很多好的意见和建议，所以我个人也在积极地更新。 因为我是一名前端开发工程师，开发的过程中，总是想着能不能加入一些炫酷的效果，有很多次都是添加上又去掉，反反复复，最后都是被 简洁 的这个原则阻止掉，毕竟，现在我是将它当作一个产品来看待，并不是一个技术或者是技巧的尝试项目。 1.x随着不断有用户过来询问：为什么 vuepress-theme-reco@0.x 不能在 vuepress@1.x 上使用？本来只是打算对 vuepress-theme-reco@0.x 进行简单的bug修复的我，终究还是忍不住，开始了 vuepress-theme-reco@1.x 的开发。又是在一个寂静的凌晨两点半（晚上就是出活快），我默默地开始了。 主题升级的关键也就是 @vuepress/plugin-blog 这款官方插件，它不需要再去麻烦地过滤数据，将分类和标签的相关信息直接存在 $categories 和 $tags 这两个全局变量中。借助于 @vuepress/plugin-blog，分类和标签功能更容易实现，但也有了一些局限。接下来两三天的时间，都是在进行功能的迁移和一些bug的修复。 vuepress-theme-reco@0.x 的开发中，更加深刻地明白了模块化和组件化编程的重要性，如果当初没有把一些功能进行封装，而是直接简单的复制，这次升级也不会这么顺利。模块拆分的越细，使用就会越灵活。 CLI还是衷心地希望能有更多的朋友参与进来，更快地去完善它。接下来时间允许的情况下，我会开源一款自动生成博客的脚手架，略过配置步骤，直接书写优质内容，这也是我后来逐渐形成的一种信念，就是希望能让这款主题，功能越完善，使用越来越简单。 LicenseMIT","link":"/2019/04/09/other/guide/"},{"title":"hexo-theme-icarus","text":"我愿称之为 Hexo 最强主题 A simple, delicate, and modern theme for the static site generator Hexo.（来自 官方文档） 一个简单、精致和现代的静态站点生成器 Hexo 的主题。 Hexo 比 Vuepress 好用坑也少，拿来做 blog 真的是棒极了。 icarus 主题，我真的好喜欢你，为了你，我要重新开始写博客！ 你他娘的还真是个好主题 奴才：老爷，您博客的主题都白了。王爷：戳了，是 icarus 主题嘛↓，噫嘻嘻嘻嘻嘻嘻~奴才：是↓是↓是↓，是 icarus 主题。奴才：（指主题）哇，好漂亮啊（迫真）。王爷：漂亮得很啊~嘻嘻嘻嘻嘻嘻（梗百科） 这个主题确实够好看，直接让我自己的主题开发计划流产了。 废话不多说直接放上链接 https://github.com/ppoffice/hexo-theme-icarus 中文文档也足够完善，即使是小白用户也能快速上手（可能） 中文文档","link":"/2021/12/12/thoughts/hexo-theme-icarus/"},{"title":"S01E01-从堆、栈、内存机制开始","text":"JavaScript 中有三种数据结构： 栈（stack) 、堆（heap)、 队列（queue)。它们是我们理解 JavaScript 核心的基础。 本篇将围绕栈（stack) 、堆（heap)，以及 JavaScript 的内存机制来展开。队列（queue)将会放在本系列的第四部分-异步和性能来讲解。 栈（stack)栈(stack)有三层含义： 含义一：数据结构栈的第一种含义是表示的是数据的存放方式。 栈存储数据的特点：LIFO规则，即后进先出（Last In, First Out）。数据存储时只能从顶部逐个存入，取出时也只能从顶部逐个取出。顶部是唯一的出口。 借助前端大神的乒乓球盒子的栗子： 如图所示，我们只能从栈顶取出或放入乒乓球，最先放进盒子的总是最后才能取出。 乒乓球的放入／取出，在栈中可称为入栈／出栈。 含义二：函数调用栈(call stack)stack 的第二层含义是代码的一种运行方式。通过栈的方式来管理代码的执行顺序，是栈数据结构的一种实践，遵循LIFO规则。 含义三：内存空间stack 的第三种含义是存放数据的一种内存区域。在 JS 运行时，需要内存空间存放数据。一般来说，内存空间又被分为两种：栈内存（stack）、堆内存（heap）。 栈内存的特点： 一般存放基本类型的值和引用类型的引用地址（指针）。 是有序的 在内存中占据空间小，大小固定 例如，最简单的，声明一个变量a： 1var a = 12 如图所示，会在栈内存中开辟一块空间存储 12，把存储的 12 赋值给 a。 我们需要注意的是： JS 允许直接操作保存在栈内存中的值。因此，基本类型是按值访问的。 堆（heap)堆只有一层含义：内存空间。堆内存的特点： 一般存放引用类型的值 是无序的 引用类型的值没有固定大小，可扩展（一个对象我们可以添加多个属性），占据空间大 为了更好的理解堆内存空间，我们看一个最简单的： 1var obj = { m : 20 } 声明一个变量 obj，会在堆内存中开辟一块新的空间，把对象中的键值对依次存储进来（同时，为这个空间加了一个16 进制的地址的标记），这个地址和这块空间是关联在一起的，如图所示。注意：这个空间地址是被保存在栈内存中的。 我们需要注意的是： JS 不允许直接访问堆内存中的位置。在操作对象时，实际上是操作的是对象的引用。因此，引用类型是按引用访问的。 内存空间管理不管是栈内存，还是堆内存，都是由系统自动分配和自动释放的。了解内存的管理机制，对于提高我们的页面性能尤其重要。 内存的生命周期一般有三步： 分配：当我们声明变量、函数、对象时，系统会自动为它们分配内存 使用：即读/写内存，也就是使用变量、函数等 回收：使用完毕，由垃圾回收机制自动回收不再使用的内存 分配和使用都很好理解。对于内存的释放回收，我们接下来重点看一下。 垃圾回收机制 垃圾回收机制：浏览器会在空闲时，遍历所有的内存空间，发现谁不被占用，就会自主的进行内存回收。 该机制的核心思想就是找到谁不被使用，因此我们可以通过标记清除的算法来标记哪些内存不再被占用。 对于堆内存，我们可以将占用它的变量手动赋值为 null 来标记清除。 对于栈内存，局部环境中，只有当函数执行完成后，函数局部环境声明的变量不再需要时，才会被释放（特殊不销毁的情况：闭包）。全局环境只有当页面关闭时才会解除变量引用。因此，开发者应尽量避免创建全局变量。 垃圾回收算法除了”标记清除”，还有一种”引用计数”，不常用，仅作了解。 内存泄漏由于疏忽或错误造成程序未能释放那些已经不再使用的内存，造成内存的浪费。引起内存泄漏的情况： 在函数内部，不带var声明变量，给 window 添加了属性 12345function foo() { this.a = 'window.a'; b = '全局变量'; }foo(); 当不需要 setInterval 或者 setTimeout 时，定时器没有被 clear，定时器的回调函数以及内部依赖的变量都不能被回收，造成内存泄漏。 闭包可以保存内部状态，使其得不到释放，造成内存泄漏。 没有清理 DOM 元素引用，手动清除为 null 即可 结束重学 JS 系列 预计 25 篇左右，这是一个旨在帮助大家，其实也是帮助我自己捋顺 JavaScript 底层知识的系列。主要包括变量和类型、执行上下文、作用域及闭包、原型和继承、单线程和异步、JS Web API、渲染和优化几个部分，将重点讲解如执行上下文、作用域、闭包、this、call、apply、bind、原型、继承、Event-loop、宏任务和微任务等比较难懂的部分。让我们一起拥抱整个 JavaScript 吧。 大家或有疑问、或指正、或鼓励、或感谢，尽管留言回复哈！非常欢迎 star 哦！","link":"/2021/01/01/frontEnd/reStudyJS/Part01-%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E5%9E%8B/S01E01-%E4%BB%8E%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6%E5%BC%80%E5%A7%8B/"},{"title":"S01E02-变量及数据类型","text":"万物起源 变量 概念 什么是变量? 存储值的一个容器或代号 什么是值？ 存储的数据 声明变量的几种方式 var（ES3） function（ES3）创建函数（函数名也是变量，只不过存储的值是函数类型的） ES6 新增： let const import ES6 的模块导入 class 创建类 注意：常量声明必须赋值，而且不能重复赋值。 1234const a // Uncaught SyntaxError: Missing initializer in const declarationconst m = 100;m = 200; //=&gt; 报什么错？Uncaught Type: Assignment to constant variable.未捕获的类型错误：分配给常量变量 数据类型值的类型：JS 中的变量是没有类型的，只有值才有。 值的类型可分为： 基本类型（值类型） Null Undefined String Boolean Number Symbol（ES6 中新增加的一个特殊的类型，唯一的值） 引用类型 普通对象 RegExp（正则对象） Date（日期对象） Math（数学对象） Error（错误对象） Function 注意：说到数据的类型都是大写哦，尽管 typeof 会返回小写的 Function: 特殊的引用类型，不用于存储数据 需要注意的知识点这部分内容比较基础，不会全部列出，会介绍一些特殊的，需要注意的。 基本包装类型 3 个特殊的基本类型：String、Number、Boolean 在逻辑上讲，基本类型值是没有属性和方法的，但却有 .length 属性和很多的 API，这是因为 JS 底层会自动将 String、Number、Boolean 类型值包装为一个封装对象。 栗子： 123456var a = new Boolean( false );if (!a) { console.log(1);}console.log(2); 答案是：输出 2！ null &amp;&amp; undefined 的区别 都代表空或者没有，作为值时小写 null：空对象指针（没有指向任何的内存空间） undefined：未定义 null 一般都是在初始化值时，先手动的先赋值为 null，然后再给他赋具体的值 12var num = null;num = 12; undefined 一般都不是人为手动控制的，大部分都是浏览器自主为空（后面可以赋值也可以不赋值） 1var num; //=&gt;此时变量的值浏览器给分配的就是 undefined 项目中一些细节问题：初始化值时，一般初始化为 null，因为它在内存中是不占空间的。而 0、[]、{} 等是有值的，会在内存中占空间。 undeclared 是一种语法错误。访问未声明的变量, 则会抛出异常, 终止执行。ReferenceError：a is not defined。 特殊的 NaN我们来介绍一个非常特殊的数字： NaN：not a number，不是一个数字 其实，not a number 容易引起误解，因为 NaN 仍然是数字类型，叫无效数值更准确些。 12var a = 2 / &quot;foo&quot;; // NaNtypeof a === &quot;number&quot;; // true isNaN()：检测当前的数字是不是无效数字 在重学 JS 系列 - 数据类型转换会对 isNaN 有更为细致的讲解。 NaN 的比较 特殊到自己不等于自己。 isNaN(num) 常作为语句的条件，来检测是否是有效数字 123if(isNaN(num)){}// 条件不可以用 Number(num) == NaN 对象字面量语法需要注意的几点 一般来说，对象的属性名只能是字符串格式的或者数字格式的，不能是其它类型的。 当对象的属性名是数字时，不支持点表示法。 1234567var obj = { name: 'chen', 0: 100,};obj[0] //=&gt;100obj['0'] //=&gt;100obj.0 //=&gt;Uncaught Syntax: Unexpected number 语法错误 当属性名是其他格式时，浏览器会把这个值 toString() 转换为字符串，然后再以这个字符串为key进行存储。 1obj[{}] = 300; //=&gt;先把({}).toString()后的结果作为对象的属性名存储进来 obj['[object Object]']=300 访问对象的属性 点表示法：对象.属性 方括号表示法：对象[“属性”]，可以通过变量来访问属性。 不管是哪种写法， 有这个属性名，则可以正常获取到值（哪怕是 null），赋值操作会修改这个属性的值 没有这个属性名，则获取的结果是 undefined，赋值操作会新增加这个属性 栗子 123456789var obj = { name:'chen', age:9};var name = 'chen';obj.name //=&gt;'chen' obj['name'] //=&gt;'chen' obj[name] //=&gt;? 基本类型与引用类型的区别 这是非常常见的、又非常基础的面试题哟！ 红宝书中是这样概括的： 存储位置的区别 基本类型的值一般被保存在于栈内存中，引用类型的值是对象，被保存在堆内存中。 包含引用类型的变量的值是一个指向该对象的一个指针，这个指针被保存在栈内存中。 访问方式的区别 基本类型是按值访问的。因为可以操作存储在变量中的实际的值 引用类型是按引用访问的。因为引用类型的值是保存在堆内存中的对象，这块不同于其它语言，JS 不允许直接访问对象的内存空间。在操作对象时，实际上是操作的是对象的引用而不是实际的对象。 复制操作的区别 基本类型复制的是这个值的一个副本，操作两个变量互不影响。 引用类型复制的其实是一个指针（地址的副本），复制操作结束后，两个变量将指向堆中的同一个对象，改变一个，会影响另一个。 为了彻底理解，我们来看一个的栗子： 1234var a = 12;var b = a;b = 13;console.log(a); //=&gt;12 执行过程是这样子的： 首先声明一个变量 a、b（变量提升，值为 undefined），在栈内存中开辟一块内存空间存储 12 执行 var b = a;，复制过程： 复制一份 12 的副本，在栈内存中重新开辟一块内存空间，存储这个副本，然后将这个副本赋值给变量 b 注意：原来的 12 和它的副本没有任何关系，在栈内存中占据不同的内存空间，互不影响 为了验证这句话，我们执行 b = 13，会在栈内存中再开辟一块内存空间，存储 13，将 13 赋值给变量 b，原来的 12 的副本已废弃，修改b的值不会影响a的值 值类型复制的过程，如图所示： 引用类型是如何实现复制的呢？还是上栗子吧。。。 1234var obj1 = {m: 20};var obj2 = obj1;obj2['m'] = 100;console.log(obj1.m); //=&gt;100 上面的代码，一起来分析一下： 首先声明一个变量 obj1、obj2（变量提升，值为 undefined），然后在堆内存中开辟一块内存空间，存储对象的键值对（为这个空间加了一个16进制的地址的标记，就是我们常说的指针），接着将这个地址赋值给变量 obj1 遇见 var obj2 = obj1;，是这样子复制的： 复制一份这个地址的副本，在栈内存中重新开辟一块内存空间，存储起来，然后将这个副本赋值给变量 obj2，这时，obj2 和 obj1 指向堆内存中同一个对象，不管修改谁，其实修改的是一个值，所以最后输出 100. 最后，我们画一个图，来形象的展示一个引用类型复制的过程： 思考题： 12345var obj = { n: 10, m: obj.n * 10};console.log(obj.m); 答案是：在 m: obj.n * 10 行报错：Uncaught TypeError: Cannot read property ‘n’ of undefined，思考一下，为什么？ 我们一起来分析一下： 变量提升，obj = undefined 开辟一个新的堆内存（比如地址是 AAAFFF111），把键值对存储到堆内存中-&gt; n: 10-&gt; m: obj.n*10 =&gt;obj.n 此时堆内存信息还没有存储完成，空间的地址还没有给 obj，此时的 obj 是undefined， 访问 obj.n 就是在访问 undefined.n 结束重学 JS 系列 预计 25 篇左右，这是一个旨在帮助大家，其实也是帮助我自己捋顺 JavaScript 底层知识的系列。主要包括变量和类型、执行上下文、作用域及闭包、原型和继承、单线程和异步、JS Web API、渲染和优化几个部分，将重点讲解如执行上下文、作用域、闭包、this、call、apply、bind、原型、继承、Event-loop、宏任务和微任务等比较难懂的部分。让我们一起拥抱整个 JavaScript 吧。 大家或有疑问、或指正、或鼓励、或感谢，尽管留言回复哈！非常欢迎 star 哦！ 点击返回博客主页","link":"/2021/01/03/frontEnd/reStudyJS/Part01-%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E5%9E%8B/S01E02-%E5%8F%98%E9%87%8F%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"},{"title":"S01E03-数据类型转换","text":"JavaScript 的数据类型转换，我们只讨论三种情况，分别是： 转Boolean类型 Boolean类型只有两个值：true / false，以下2种情况下会转换为布尔类型: 手动转 Boolean() !（先转为布尔类型，再取反） !!（两次取反，只剩下转布尔类型了） 自动转 在流程控制语句中（如 if 语句），会自动执行 Boolean() 转换。 哪些值可以转换为 false？ 规律：在 JS 中转换为 false 的，只有 null、undefined、空字符串、0 和 NaN 这五个值。 1234Boolean(0)=&gt;falseBoolean([])=&gt;true!0=&gt;true!!0=&gt;false 常见笔试题 12[]==false //=&gt;两边都转为数字再比较，true![]==false //=&gt;[]先转为Boolean类型，取反，true 转Number类型 转换规律： 基本类型转换为数字，使用Number() 引用类型转换为数字，先toString()转换为字符串，然后再将字符串Number()转换为数字 以下4种情况下会转换为数字： 隐式转：isNaN()isNaN() 检测机制：首先检测当前的值是不是数字类型的，如果不是会先转换为数字类型的，然后再判断。 123456789101112//=&gt;语法：isNaN([value])isNaN('13') =&gt;falseisNaN('陈陈') =&gt;trueisNaN(true) =&gt;falseisNaN(false) =&gt;falseisNaN(null) =&gt;falseisNaN(undefined) =&gt;trueisNaN({age:9}) =&gt;trueisNaN([12,23]) =&gt;trueisNaN([12]) =&gt;falseisNaN(/^$/) =&gt;trueisNaN(function(){}) =&gt;true 这里有几个引用类型的需要注意一下： 12345678910[对象]({}).toString() -&gt;'[object Object]' -&gt;NaN[数组][].toString() -&gt;''-&gt;0[12,23].toString() -&gt;'12,23' -&gt;NaN[12].toString() -&gt;'12' -&gt;12[正则]/^$/.toString() -&gt;'/^$/' -&gt;NaN 显式转：Number() / parseInt() / parseFloat() **Number()**：浏览器自动转换默认的方法 遇见字符串有洁癖：如果字符串中出现任意一个非数字字符，结果则为NaN。 123456789101112131415[字符串] Number('')=&gt;0 Number(' ')=&gt;0 //空格 Number('\\n')=&gt;0 //换行符 Number('\\t')=&gt;0 //制表符 Number('13')=&gt;13 Number('13px')=&gt;NaN Number('13.5')=&gt;13.5 Number('13.5.0')=&gt;NaN[布尔] Number(true) =&gt;1 Number(false) =&gt;0[其它] Number(null)=&gt;0 Number(undefined)=&gt;NaN **parseInt()/parseFloat()**：专门用于将字符串转换为数值。 规则：从字符串的最左边开始查找，遇到非有效字符查找结束。 parseInt：整数部分 parseFloat：小数部分（第二个小数点无效） 12345678[字符串]parseInt('')=&gt;NaN（区别于Number）parseInt('13.5px')=&gt;13parseInt('width:13.5px')=&gt;NaNparseInt('1px3')=&gt;1parseFloat('13.5px')=&gt;13.5parseFloat('5a-1')=&gt;5parseFloat('5e-1')=&gt;0.5 //=&gt; ??? parseInt()支持两个参数，parseInt（’10px’, 2 ）输出什么？2 隐式转换：+ - / * 规律：在JS中，+ - * / % 都是数学运算 +号，遇到字符串，开始起拼接作用，没有遇到之前是数学运算 除 + 以外，其它在运算时，如果有非数字类型的值，会先转换为Number类型（自动发生Number()转换），然后再进行运算。 需要注意的细节问题： i++ 遇见数字型字符串，就是单纯的数学运算，已经摒弃掉字符串拼接的规则 我们来看一些栗子： 123456789'3'-1 =&gt;2'3px'-1 =&gt;NaN2+'3px' =&gt;'23px' 字符串拼接5+2+'3px'+1 =&gt;'73px1' var i='3';i=i+1; =&gt;'31'i+=1; =&gt;'31'i++; =&gt;4 //注意 思考题 123456789var num = '10';if (num == 10) { num++;} else if (num == 5) { num--;} else { num = 0;}console.log(num); //=&gt;11 “==”比较，两边多数会转换为Number类型如果“==”两边的数据类型不相同，会首先进行强制类型转换，转换为相同类型再比较。 三种特殊情况： NaN null 和 undefined 12null == undefined //=&gt;truenull === undefined //=&gt;false 对象 == 对象 对象操作的是引用地址，因此判断两个引用地址是否指向同一个对象 12345{name:'xxx'}=={name:'xxx'} //=&gt;false[]==[] //=&gt;falsevar obj1={};var obj2=obj1;obj1==obj2 //=&gt;true 除了上边的三种特殊情况，两边只要不是数字类型的，都转换为数字类型，比如： 12345671==true //=&gt;true1==false //=&gt;false2==true //=&gt;false 规律不要混淆，这里是把true变为数字1[]==true //false 都转换为数字 0==1[]==false //true 都转换为数字 0==0![]==true //false![]==false //true 先算![]，把数组转换为布尔取反=&gt;false 转String类型toString()/ String() / toFixed() / join() 等方法 toString()/ String() 除了对象，都是你理解的转换结果，只要是普通对象，最后结果都是’[object Object]’。 栗子： 123456789101 -&gt;'1'NaN -&gt;'NaN'null -&gt;'null'[] -&gt;''[13] -&gt;'13'[12,23] -&gt;'12,23'// 【对象】{name:'xxx'} -&gt;'[object Object]'{} -&gt;'[object Object]' toFixed() 12var n = Math.PI;//=&gt;获取圆周率：n.toFixed(2);//=&gt;'3.14' join()12var ary = [12,23,34];ary.join('+');//=&gt;'12+23+34' alert() / confirm() / prompt() / document.write() 等输出内容的方法这里有一个坑： alert(a++) =&gt;是先执行 alert(a)，然后 a 再自增 1 alert(++a) =&gt;是先 a 自增 1，然后再执行 alert(a) 123let a = 1;alert(a++);//=&gt;'1'console.log(a);//=&gt;2 同理： 123let a = 1;console.log(a++);//=&gt;1console.log(a);//=&gt;2 “+”拼接字符串时 规律：当“+”连接的表达式中出现字符串时，开始拼接，前边的是数学运算 121+true //=&gt;2 数学运算'1'+true //=&gt;'1true' 字符串拼接 思考题 12312+true+false+null+undefined+[]+'陈'+null+undefined+[]+true=&gt;'NaN陈nullundefinedtrue' 这里需要注意的是： 引用类型参与’+’运算比如数组、对象（注意：对象要加括号），虽然没有看见字符串，但是当引用类型转换为数字时，首先会转换为字符串，所以'+'起的是字符串拼接的作用。 123[12]+10 //=&gt;'1210' ({})+10 //=&gt;&quot;[object Object]10&quot;[]+10 //=&gt;&quot;10&quot; 特殊情况：{}+任意数据类型 =&gt;根本就不是数学运算，也不是字符串拼接，它是两部分代码=&gt;实际操作的是后边的数据，会执行Number()转换为数字类型 12345678910{}+10 //=&gt;10// {} 代表一个代码块（块级作用域），严格写法：{}; +10;// +10 才是我们的操作// more{}+'' //=&gt;0{}+[] //=&gt;0{}+null //=&gt;0{}+undefined //=&gt;NaN{}+{} //=&gt;&quot;[object Object][object Object] 给对象设置属性名时对象的属性只能是数字或者字符串，如果不是字符串，首先转换为字符串，然后再以这个字符串为 key 存储到对象中。 结束重学 JS 系列 预计 25 篇左右，这是一个旨在帮助大家，其实也是帮助我自己捋顺 JavaScript 底层知识的系列。主要包括变量和类型、执行上下文、作用域及闭包、原型和继承、单线程和异步、JS Web API、渲染和优化几个部分，将重点讲解如执行上下文、作用域、闭包、this、call、apply、bind、原型、继承、Event-loop、宏任务和微任务等比较难懂的部分。让我们一起拥抱整个 JavaScript 吧。","link":"/2021/01/10/frontEnd/reStudyJS/Part01-%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E5%9E%8B/S01E03-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"}],"tags":[{"name":"随笔","slug":"随笔","link":"/tags/%E9%9A%8F%E7%AC%94/"},{"name":"面试","slug":"面试","link":"/tags/%E9%9D%A2%E8%AF%95/"},{"name":"找工作","slug":"找工作","link":"/tags/%E6%89%BE%E5%B7%A5%E4%BD%9C/"},{"name":"小程序","slug":"小程序","link":"/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"考研","slug":"考研","link":"/tags/%E8%80%83%E7%A0%94/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"DOM编程艺术","slug":"DOM编程艺术","link":"/tags/DOM%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF/"},{"name":"转载","slug":"转载","link":"/tags/%E8%BD%AC%E8%BD%BD/"},{"name":"重学JS","slug":"重学JS","link":"/tags/%E9%87%8D%E5%AD%A6JS/"},{"name":"金融","slug":"金融","link":"/tags/%E9%87%91%E8%9E%8D/"},{"name":"随想","slug":"随想","link":"/tags/%E9%9A%8F%E6%83%B3/"},{"name":"blog - 图床","slug":"blog-图床","link":"/tags/blog-%E5%9B%BE%E5%BA%8A/"},{"name":"Hexo主题","slug":"Hexo主题","link":"/tags/Hexo%E4%B8%BB%E9%A2%98/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"变量和类型","slug":"变量和类型","link":"/tags/%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E5%9E%8B/"}],"categories":[{"name":"article","slug":"article","link":"/categories/article/"},{"name":"essay","slug":"essay","link":"/categories/essay/"},{"name":"frontEnd","slug":"frontEnd","link":"/categories/frontEnd/"},{"name":"Finance","slug":"Finance","link":"/categories/Finance/"},{"name":"Thoughts","slug":"Thoughts","link":"/categories/Thoughts/"},{"name":"FrontEnd","slug":"FrontEnd","link":"/categories/FrontEnd/"}]}