(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{547:function(s,t,a){"use strict";a.r(t);var n=a(6),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("目录")]),s._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#基本包装类型"}},[s._v("基本包装类型")])]),a("li",[a("a",{attrs:{href:"#null-undefined-的区别"}},[s._v("null && undefined 的区别")])]),a("li",[a("a",{attrs:{href:"#特殊的-nan"}},[s._v("特殊的 NaN")])]),a("li",[a("a",{attrs:{href:"#对象字面量语法需要注意的几点"}},[s._v("对象字面量语法需要注意的几点")])])])]),a("p"),s._v(" "),a("h1",{attrs:{id:"变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[s._v("#")]),s._v(" 变量")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("概念\n什么是变量?")]),s._v(" "),a("blockquote",[a("p",[s._v("存储值的一个容器或代号")])]),s._v(" "),a("p",[s._v("什么是值？")]),s._v(" "),a("blockquote",[a("p",[s._v("存储的数据")])])]),s._v(" "),a("li",[a("p",[s._v("声明变量的几种方式")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("var（ES3）")])]),s._v(" "),a("li",[a("p",[s._v("function（ES3）创建函数（函数名也是变量，只不过存储的值是函数类型的）")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("ES6 新增：")])]),s._v(" "),a("ul",[a("li",[s._v("let")]),s._v(" "),a("li",[s._v("const")]),s._v(" "),a("li",[a("code",[s._v("import")]),s._v("  ES6 的模块导入")]),s._v(" "),a("li",[a("code",[s._v("class")]),s._v(" 创建类")])])])])])]),s._v(" "),a("p",[s._v("注意："),a("strong",[s._v("常量声明必须赋值，而且不能重复赋值。")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Uncaught SyntaxError: Missing initializer in const declaration")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nm "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=> 报什么错？Uncaught Type: Assignment to constant variable.未捕获的类型错误：分配给常量变量")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h1",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[s._v("#")]),s._v(" 数据类型")]),s._v(" "),a("p",[s._v("值的类型："),a("em",[a("strong",[s._v("JS 中的变量是没有类型的，只有值才有。")])])]),s._v(" "),a("blockquote",[a("p",[s._v("值的类型可分为：")]),s._v(" "),a("ol",[a("li",[s._v("基本类型（值类型）")])]),s._v(" "),a("ul",[a("li",[s._v("Null")]),s._v(" "),a("li",[s._v("Undefined")]),s._v(" "),a("li",[s._v("String")]),s._v(" "),a("li",[s._v("Boolean")]),s._v(" "),a("li",[s._v("Number")]),s._v(" "),a("li",[s._v("Symbol（ES6 中新增加的一个特殊的类型，唯一的值）")])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("引用类型")])]),s._v(" "),a("ul",[a("li",[s._v("普通对象\n"),a("ul",[a("li",[s._v("RegExp（正则对象）")]),s._v(" "),a("li",[s._v("Date（日期对象）")]),s._v(" "),a("li",[s._v("Math（数学对象）")]),s._v(" "),a("li",[s._v("Error（错误对象）")])])]),s._v(" "),a("li",[s._v("Function")])])]),s._v(" "),a("p",[s._v("注意：说到数据的类型都是"),a("strong",[s._v("大写")]),s._v("哦，尽管 typeof 会返回小写的")]),s._v(" "),a("p",[s._v("Function: 特殊的引用类型，不用于存储数据")]),s._v(" "),a("h1",{attrs:{id:"需要注意的知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需要注意的知识点"}},[s._v("#")]),s._v(" 需要注意的知识点")]),s._v(" "),a("p",[s._v("这部分内容比较基础，不会全部列出，会介绍一些特殊的，需要注意的。")]),s._v(" "),a("h2",{attrs:{id:"基本包装类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本包装类型"}},[s._v("#")]),s._v(" 基本包装类型")]),s._v(" "),a("blockquote",[a("p",[s._v("3 个特殊的基本类型：String、Number、Boolean")])]),s._v(" "),a("p",[s._v("在逻辑上讲，基本类型值是没有属性和方法的，但却有 .length 属性和很多的 API，这是因为 JS 底层会自动将 String、Number、Boolean 类型值包装为一个封装对象。")]),s._v(" "),a("p",[s._v("栗子：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("答案是：输出 2！")]),s._v(" "),a("h2",{attrs:{id:"null-undefined-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-undefined-的区别"}},[s._v("#")]),s._v(" null && undefined 的区别")]),s._v(" "),a("blockquote",[a("p",[s._v("都代表空或者没有，作为值时小写")]),s._v(" "),a("ul",[a("li",[s._v("null："),a("code",[s._v("空对象指针（没有指向任何的内存空间）")])]),s._v(" "),a("li",[s._v("undefined：未定义")])])]),s._v(" "),a("p",[s._v("null 一般都是在初始化值时，先"),a("strong",[s._v("手动的先赋值为 null")]),s._v("，然后再给他赋具体的值")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("undefined 一般都不是人为手动控制的，大部分都是"),a("strong",[s._v("浏览器自主为空")]),s._v("（后面可以赋值也可以不赋值）")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>此时变量的值浏览器给分配的就是 undefined")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("项目中一些细节问题：\n初始化值时，一般初始化为 null，因为它在内存中是不占空间的。而 0、[]、{} 等是有值的，会在内存中占空间。")]),s._v(" "),a("p",[s._v("undeclared 是一种语法错误。访问未声明的变量, 则会抛出异常, 终止执行。ReferenceError：a is not defined。")]),s._v(" "),a("h2",{attrs:{id:"特殊的-nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊的-nan"}},[s._v("#")]),s._v(" 特殊的 NaN")]),s._v(" "),a("p",[s._v("我们来介绍一个非常特殊的数字：")]),s._v(" "),a("blockquote",[a("p",[s._v("NaN：not a number，不是一个数字")])]),s._v(" "),a("p",[s._v("其实，not a number 容易引起误解，因为 NaN 仍然是数字类型，叫"),a("strong",[s._v("无效数值")]),s._v("更准确些。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// NaN")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"number"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ol",[a("li",[a("p",[s._v("isNaN()：检测当前的数字是不是无效数字\n在"),a("a",{attrs:{href:"https://github.com/cxh0224/blog/issues/3",target:"_blank",rel:"noopener noreferrer"}},[s._v("重学 JS 系列 - 数据类型转换"),a("OutboundLink")],1),s._v("会对 isNaN 有更为细致的讲解。")])]),s._v(" "),a("li",[a("p",[s._v("NaN 的比较")]),s._v(" "),a("blockquote",[a("p",[s._v("特殊到自己不等于自己。")])]),s._v(" "),a("p",[a("strong",[s._v("isNaN(num) 常作为语句的条件，来检测是否是有效数字")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 条件不可以用 Number(num) == NaN")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"对象字面量语法需要注意的几点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象字面量语法需要注意的几点"}},[s._v("#")]),s._v(" 对象字面量语法需要注意的几点")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("一般来说，对象的属性名只能是"),a("strong",[s._v("字符串格式的")]),s._v("或者"),a("strong",[s._v("数字格式的")]),s._v("，不能是其它类型的。\n当对象的属性名是数字时，不支持点表示法。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'chen'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>100")]),s._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>100")]),s._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>Uncaught Syntax: Unexpected number 语法错误")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("当属性名是其他格式时，浏览器会把这个值 toString() 转换为字符串，然后再"),a("code",[s._v("以这个字符串为key")]),s._v("进行存储。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>先把({}).toString()后的结果作为对象的属性名存储进来 obj['[object Object]']=300")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("访问对象的属性")]),s._v(" "),a("ul",[a("li",[s._v("点表示法：对象.属性")]),s._v(" "),a("li",[s._v('方括号表示法：对象["属性"]，可以'),a("strong",[s._v("通过变量来访问属性")]),s._v("。")])]),s._v(" "),a("p",[s._v("不管是哪种写法，")]),s._v(" "),a("ul",[a("li",[s._v("有这个属性名，则可以正常获取到值（哪怕是 null），赋值操作会修改这个属性的值")]),s._v(" "),a("li",[s._v("没有这个属性名，则获取的结果是 undefined，赋值操作会新增加这个属性")])]),s._v(" "),a("p",[s._v("栗子")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'chen'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    age"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'chen'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>'chen'  ")]),s._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'name'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>'chen' ")]),s._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>?")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])])])]),s._v(" "),a("h1",{attrs:{id:"基本类型与引用类型的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类型与引用类型的区别"}},[s._v("#")]),s._v(" 基本类型与引用类型的区别")]),s._v(" "),a("blockquote",[a("p",[s._v("这是非常常见的、又非常基础的面试题哟！")])]),s._v(" "),a("p",[s._v("红宝书中是这样概括的：")]),s._v(" "),a("ol",[a("li",[a("p",[a("em",[s._v("存储位置的区别")])]),s._v(" "),a("ul",[a("li",[s._v("基本类型的值一般被保存在于"),a("strong",[s._v("栈内存")]),s._v("中，引用类型的值是对象，被保存在"),a("strong",[s._v("堆内存")]),s._v("中。")]),s._v(" "),a("li",[s._v("包含引用类型的变量的值是一个指向该对象的一个指针，这个指针被保存在栈内存中。")])])]),s._v(" "),a("li",[a("p",[s._v("访问方式的区别")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("基本类型是按值访问的")]),s._v("。因为可以操作存储在变量中的"),a("strong",[s._v("实际的值")])]),s._v(" "),a("li",[a("strong",[s._v("引用类型是按引用访问的")]),s._v("。因为引用类型的值是保存在堆内存中的对象，这块不同于其它语言，JS 不允许直接访问对象的内存空间。在操作对象时，实际上是操作的是"),a("strong",[s._v("对象的引用而不是实际的对象")]),s._v("。")])])]),s._v(" "),a("li",[a("p",[s._v("复制操作的区别")]),s._v(" "),a("ul",[a("li",[s._v("基本类型复制的是"),a("strong",[s._v("这个值的一个副本")]),s._v("，操作两个变量互不影响。")]),s._v(" "),a("li",[s._v("引用类型复制的其实是"),a("strong",[s._v("一个指针（地址的副本）")]),s._v("，复制操作结束后，两个变量将指向堆中的同一个对象，改变一个，会影响另一个。")])])])]),s._v(" "),a("p",[s._v("为了彻底理解，我们来看一个的栗子：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>12")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("执行过程是这样子的：")]),s._v(" "),a("ol",[a("li",[s._v("首先声明一个变量 a、b（变量提升，值为 undefined），在栈内存中开辟一块内存空间存储 12")]),s._v(" "),a("li",[s._v("执行 var b = a;，复制过程：\n复制一份 12 的副本，在栈内存中重新开辟一块内存空间，存储这个副本，然后将这个副本赋值给变量 b\n注意："),a("code",[s._v("原来的 12 和它的副本没有任何关系，在栈内存中占据不同的内存空间，互不影响")])]),s._v(" "),a("li",[s._v("为了验证这句话，我们执行 b = 13，会在栈内存中再开辟一块内存空间，存储 13，将 13 赋值给变量 b，原来的 12 的副本已废弃，修改b的值不会影响a的值")])]),s._v(" "),a("p",[s._v("值类型复制的过程，如图所示：")]),s._v(" "),a("img",{attrs:{width:"146",alt:"4",src:"https://user-images.githubusercontent.com/22387652/56795829-d78dc200-6843-11e9-8901-74b970743889.png"}}),s._v(" "),a("p",[s._v("引用类型是如何实现复制的呢？还是上栗子吧。。。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" obj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nobj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'m'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=>100")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面的代码，一起来分析一下：")]),s._v(" "),a("ol",[a("li",[s._v("首先声明一个变量 obj1、obj2（变量提升，值为 undefined），然后在堆内存中开辟一块内存空间，存储对象的键值对（为这个空间加了一个"),a("code",[s._v("16进制的地址")]),s._v("的标记，就是我们常说的指针），接着将这个地址赋值给变量 obj1")]),s._v(" "),a("li",[s._v("遇见 var obj2 = obj1;，是这样子复制的：\n复制一份这个地址的副本，在栈内存中重新开辟一块内存空间，存储起来，然后将这个副本赋值给变量 obj2，这时，obj2 和 obj1 指向堆内存中同一个对象，不管修改谁，其实修改的是一个值，所以最后输出 100.")])]),s._v(" "),a("p",[s._v("最后，我们画一个图，来形象的展示一个引用类型复制的过程：")]),s._v(" "),a("img",{attrs:{width:"322",alt:"3",src:"https://user-images.githubusercontent.com/22387652/56796120-75818c80-6844-11e9-9b29-141fd5896311.png"}}),s._v(" "),a("p",[a("strong",[s._v("思考题：")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    m"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("答案是：\n在 m: obj.n * 10 行报错：Uncaught TypeError: Cannot read property 'n' of undefined，思考一下，为什么？")]),s._v(" "),a("p",[s._v("我们一起来分析一下：")]),s._v(" "),a("ol",[a("li",[s._v("变量提升，obj = undefined")]),s._v(" "),a("li",[s._v("开辟一个新的堆内存（比如地址是 AAAFFF111），把键值对存储到堆内存中\n-> "),a("code",[s._v("n: 10")]),s._v("\n-> "),a("code",[s._v("m: obj.n*10")]),s._v(" =>obj.n 此时堆内存信息还没有存储完成，空间的地址还没有给 obj，此时的 obj 是undefined， 访问 obj.n 就是在访问 undefined.n")])]),s._v(" "),a("h1",{attrs:{id:"结束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结束"}},[s._v("#")]),s._v(" 结束")]),s._v(" "),a("p",[a("em",[a("strong",[s._v("重学 JS 系列")])]),s._v(" 预计 25 篇左右，这是一个旨在帮助大家，其实也是帮助我自己捋顺 JavaScript 底层知识的系列。主要包括变量和类型、执行上下文、作用域及闭包、原型和继承、单线程和异步、JS Web API、渲染和优化几个部分，将重点讲解如执行上下文、作用域、闭包、this、call、apply、bind、原型、继承、Event-loop、宏任务和微任务等比较难懂的部分。让我们一起拥抱整个 JavaScript 吧。")]),s._v(" "),a("p",[s._v("大家或有疑问、或指正、或鼓励、或感谢，尽管留言回复哈！非常欢迎 star 哦！")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/chenchen0224/webfrontend-space",target:"_blank",rel:"noopener noreferrer"}},[s._v("点击返回博客主页"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);